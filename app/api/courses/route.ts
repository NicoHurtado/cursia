import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { db } from '@/lib/db';
import { safeJsonParseArray } from '@/lib/json-utils';
import {
  CourseCreateRequest,
  CourseCreateRequestSchema,
  CourseCreateResponse,
  CourseMetadataSchema,
  ModuleContentSchema,
} from '@/lib/dto/course';
import { askClaude, generateCourseMetadata } from '@/lib/ai/anthropic';
import { simpleAI } from '@/lib/ai/simple';
import { ContractPromptBuilder } from '@/lib/ai/content-contract-prompts';
import { YouTubeService } from '@/lib/youtube';
import {
  ContentContractValidator,
  ContentDocument,
} from '@/lib/content-contract';
import { contentStore } from '@/lib/content-store';
import { normalizeToContract } from '@/lib/content-normalizer';
import { v4 as uuidv4 } from 'uuid';
import { UserPlan, canCreateCourse } from '@/lib/plans';
import { CourseStatus } from '@prisma/client';
import { ContentValidator } from '@/lib/content-validator';
import { parseAIJsonRobust, repairContentDocument } from '@/lib/json-parser-robust';

// Enhanced rate limiting
const RATE_LIMIT_WINDOW = 60 * 1000; // 1 minute
const RATE_LIMIT_MAX = 3; // 3 requests per minute per user

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get all courses for the user (excluding deleted ones) - Optimized query
    const courses = await db.course.findMany({
      where: {
        userId: session.user.id,
        deletedAt: null, // Exclude deleted courses
      },
      select: {
        id: true,
        courseId: true,
        title: true,
        description: true,
        status: true,
        createdAt: true,
        updatedAt: true,
        completedAt: true,
        totalModules: true,
        isPublic: true,
        _count: {
          select: {
            modules: true,
          },
        },
        modules: {
          select: {
            id: true,
            chunks: {
              select: {
                id: true,
              },
            },
          },
        },
      },
      orderBy: {
        updatedAt: 'desc', // Use updatedAt for better performance
      },
      take: 50, // Limit to 50 courses for better performance
    });

    // Get user progress for all courses to calculate real completion percentage
    const userProgresses = await db.userProgress.findMany({
      where: {
        userId: session.user.id,
        courseId: {
          in: courses.map(c => c.id),
        },
      },
      select: {
        courseId: true,
        completedChunks: true,
      },
    });

    // Create a map for quick lookup
    const progressMap = new Map();
    userProgresses.forEach(progress => {
      const completedChunks = safeJsonParseArray(progress.completedChunks);
      progressMap.set(progress.courseId, completedChunks);
    });

    // Map courses to response format
    const response = courses.map(course => {
      // Calculate total chunks across all modules
      const totalChunks = course.modules.reduce(
        (sum, module) => sum + module.chunks.length,
        0
      );

      // Get completed chunks for this course
      const completedChunks = progressMap.get(course.id) || [];

      // Calculate real completion percentage
      const completionPercentage =
        totalChunks > 0
          ? Math.round((completedChunks.length / totalChunks) * 100)
          : 0;

      return {
        id: course.id,
        courseId: course.courseId,
        title: course.title || 'Generating...',
        description:
          course.description ||
          'Course description will appear here once generated.',
        status: course.status.toLowerCase(),
        status_display: course.status,
        createdAt: course.createdAt.toISOString(),
        updatedAt: course.updatedAt.toISOString(),
        completedAt: course.completedAt?.toISOString() || null,
        totalModules: course.totalModules,
        completedModules: course._count.modules,
        isPublic: course.isPublic || false,
        completionPercentage,
        totalChunks,
        completedChunks: completedChunks.length,
      };
    });

    return NextResponse.json(response);
  } catch (error) {
    console.error('Courses list error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// Funci√≥n para generar topics espec√≠ficos del curso usando IA
async function generateSpecificCourseTopics(
  courseTopic: string,
  existingTopics: string[],
  level: string
): Promise<string[]> {
  try {
    console.log('ü§ñ Generating specific course topics using AI...');

    const systemPrompt = `Eres un experto en educaci√≥n y dise√±o de cursos. Tu tarea es generar 5 conceptos clave espec√≠ficos para un curso.

REGLAS IMPORTANTES:
- Cada topic debe ser un CONCEPTO CLAVE del tema (no una lecci√≥n espec√≠fica)
- Deben ser conceptos fundamentales que se aprenden en el curso
- Palabras o frases cortas (1-3 palabras m√°ximo)
- Diferentes de los t√≠tulos de los m√≥dulos (que son m√°s descriptivos)
- Relevantes y espec√≠ficos al tema del curso
- En espa√±ol

EJEMPLOS:
- Para "Comidas saludables": "Alimentos nutritivos", "M√©todos de cocci√≥n", "Planificaci√≥n de men√∫s"
- Para "Programaci√≥n": "POO", "Manejo de errores", "Estructuras de datos"
- Para "Marketing": "SEO", "Analytics", "Branding"

TEMA DEL CURSO: ${courseTopic}
NIVEL: ${level}

TOPICS EXISTENTES (si los hay): ${existingTopics.join(', ')}

Responde SOLO con un JSON v√°lido que contenga un array de 5 strings con los conceptos clave:
{
  "topics": [
    "Concepto clave 1",
    "Concepto clave 2", 
    "Concepto clave 3",
    "Concepto clave 4",
    "Concepto clave 5"
  ]
}`;

    const userPrompt = `Genera 5 conceptos clave espec√≠ficos para un curso sobre "${courseTopic}". 
    
Los conceptos deben ser:
- CONCEPTOS FUNDAMENTALES del tema (no lecciones espec√≠ficas)
- Palabras o frases cortas (1-3 palabras m√°ximo)
- Diferentes de los t√≠tulos de los m√≥dulos
- Relevantes al tema del curso
- En espa√±ol

Responde SOLO con el JSON solicitado.`;

    const response = await askClaude({
      system: systemPrompt,
      user: userPrompt,
    });

    // Intentar parsear la respuesta JSON
    let topics: string[] = [];

    try {
      const jsonResponse = JSON.parse(response);
      if (jsonResponse.topics && Array.isArray(jsonResponse.topics)) {
        topics = jsonResponse.topics.slice(0, 5);
      }
    } catch (parseError) {
      console.error('‚ùå Error parsing topics JSON:', parseError);
      console.log('Raw response:', response);

      // Fallback: extraer topics de la respuesta de texto
      const lines = response.split('\n').filter((line: string) => line.trim());
      topics = lines
        .map((line: string) =>
          line
            .replace(/^\d+\.?\s*/, '')
            .replace(/^[-*]\s*/, '')
            .trim()
        )
        .filter((topic: string) => topic.length > 0 && topic.length <= 20)
        .slice(0, 5);
    }

    console.log('‚úÖ Generated course topics:', topics);
    return topics;
  } catch (error) {
    console.error('‚ùå Error generating course topics:', error);

    // Fallback: generar topics b√°sicos
    const fallbackTopics = [
      'Fundamentos',
      'Aplicaciones',
      'T√©cnicas',
      'Casos de uso',
      'Implementaci√≥n',
    ];

    console.log('üîÑ Using fallback course topics:', fallbackTopics);
    return fallbackTopics;
  }
}

// Funci√≥n para generar preguntas de quiz usando IA
async function generateQuizQuestions(
  moduleTitle: string,
  moduleContent: string,
  courseTopic: string,
  level: string
): Promise<any[]> {
  try {
    console.log('ü§ñ Generating quiz questions using AI...');

    const systemPrompt = `Eres un experto en educaci√≥n y evaluaci√≥n. Tu tarea es generar 5 preguntas de quiz MUY ESPEC√çFICAS del contenido del m√≥dulo.

REGLAS CR√çTICAS:
- Genera exactamente 5 preguntas
- Cada pregunta debe tener 4 opciones de respuesta
- Las preguntas DEBEN ser sobre conceptos, t√©cnicas, m√©todos, ingredientes, procesos o informaci√≥n espec√≠fica del tema
- NO uses preguntas gen√©ricas como "¬øCu√°l es el concepto principal?"
- Las preguntas deben ser sobre detalles espec√≠ficos del contenido
- Una opci√≥n debe ser claramente correcta, las otras 3 deben ser incorrectas pero plausibles
- Usa un lenguaje claro y profesional en espa√±ol
- Las preguntas deben evaluar comprensi√≥n profunda del tema

EJEMPLOS DE BUENAS PREGUNTAS:
- Para comida saludable: "¬øCu√°les son las prote√≠nas presentes en el salm√≥n?", "¬øCu√°l es el mejor m√©todo para cocinar verduras al vapor?", "¬øQu√© vitaminas se pierden al fre√≠r los alimentos?"
- Para programaci√≥n: "¬øQu√© patr√≥n de dise√±o se usa para crear objetos sin especificar su clase?", "¬øCu√°l es la complejidad temporal del algoritmo de ordenamiento burbuja?"
- Para arte: "¬øQu√© t√©cnica de pintura al √≥leo permite crear transiciones suaves?", "¬øCu√°l es la regla de los tercios en composici√≥n fotogr√°fica?"

CONTENIDO DEL M√ìDULO: ${moduleContent}
T√çTULO DEL M√ìDULO: ${moduleTitle}
TEMA DEL CURSO: ${courseTopic}
NIVEL: ${level}

Responde SOLO con un JSON v√°lido que contenga un array de 5 preguntas:
{
  "questions": [
    {
      "question": "Pregunta espec√≠fica sobre detalles del tema",
      "options": ["Respuesta espec√≠fica correcta", "Respuesta incorrecta pero plausible", "Otra respuesta incorrecta", "Cuarta respuesta incorrecta"],
      "correctAnswer": 0,
      "explanation": "Explicaci√≥n espec√≠fica de por qu√© la respuesta es correcta"
    }
  ]
}`;

    const userPrompt = `Genera 5 preguntas de quiz MUY ESPEC√çFICAS para el m√≥dulo "${moduleTitle}" sobre "${courseTopic}".

IMPORTANTE: Las preguntas deben ser sobre:
- Conceptos espec√≠ficos del tema
- T√©cnicas, m√©todos o procesos mencionados
- Ingredientes, herramientas o elementos espec√≠ficos
- Detalles t√©cnicos o informaci√≥n concreta
- Aplicaciones pr√°cticas del contenido

NO uses preguntas gen√©ricas. Cada pregunta debe requerir conocimiento espec√≠fico del contenido del m√≥dulo.

Responde SOLO con el JSON solicitado.`;

    const response = await askClaude({
      system: systemPrompt,
      user: userPrompt,
    });

    // Intentar parsear la respuesta JSON
    let questions: any[] = [];

    try {
      const jsonResponse = JSON.parse(response);
      if (jsonResponse.questions && Array.isArray(jsonResponse.questions)) {
        questions = jsonResponse.questions.slice(0, 5);
      }
    } catch (parseError) {
      console.error('‚ùå Error parsing quiz questions JSON:', parseError);
      console.log('Raw response:', response);

      // Fallback: generar preguntas b√°sicas
      questions = generateFallbackQuizQuestions(moduleTitle, courseTopic);
    }

    // Asegurar que tenemos exactamente 5 preguntas
    while (questions.length < 5) {
      questions.push(
        generateFallbackQuizQuestion(
          moduleTitle,
          courseTopic,
          questions.length + 1
        )
      );
    }

    console.log('‚úÖ Generated quiz questions:', questions.length);
    return questions;
  } catch (error) {
    console.error('‚ùå Error generating quiz questions:', error);

    // Fallback: generar preguntas b√°sicas
    return generateFallbackQuizQuestions(moduleTitle, courseTopic);
  }
}

// Funci√≥n para generar preguntas de fallback
function generateFallbackQuizQuestions(
  moduleTitle: string,
  courseTopic: string
): any[] {
  const questions = [];

  for (let i = 1; i <= 5; i++) {
    questions.push(generateFallbackQuizQuestion(moduleTitle, courseTopic, i));
  }

  return questions;
}

// Funci√≥n para generar una pregunta de fallback individual
function generateFallbackQuizQuestion(
  moduleTitle: string,
  courseTopic: string,
  questionNumber: number
): any {
  // Generar preguntas m√°s espec√≠ficas basadas en el tema del curso
  const isHealthyFood =
    courseTopic.toLowerCase().includes('comida') ||
    courseTopic.toLowerCase().includes('alimentaci√≥n') ||
    courseTopic.toLowerCase().includes('saludable');
  const isProgramming =
    courseTopic.toLowerCase().includes('programaci√≥n') ||
    courseTopic.toLowerCase().includes('c√≥digo') ||
    courseTopic.toLowerCase().includes('desarrollo');
  const isArt =
    courseTopic.toLowerCase().includes('arte') ||
    courseTopic.toLowerCase().includes('dibujo') ||
    courseTopic.toLowerCase().includes('pintura');

  let questionTemplates: string[];
  let optionTemplates: string[][];
  let explanations: string[];

  if (isHealthyFood) {
    questionTemplates = [
      `¬øCu√°les son las prote√≠nas principales en ${moduleTitle}?`,
      `¬øCu√°l es el mejor m√©todo de cocci√≥n para ${moduleTitle}?`,
      `¬øQu√© vitaminas se conservan mejor en ${moduleTitle}?`,
      `¬øCu√°l es la temperatura ideal para cocinar ${moduleTitle}?`,
      `¬øQu√© nutrientes aporta principalmente ${moduleTitle}?`,
    ];
    optionTemplates = [
      [
        'Prote√≠nas completas',
        'Prote√≠nas incompletas',
        'Solo carbohidratos',
        'Solo grasas',
      ],
      ['Al vapor', 'Frito', 'Crudo', 'Quemado'],
      [
        'Vitaminas hidrosolubles',
        'Vitaminas liposolubles',
        'Solo minerales',
        'Solo fibra',
      ],
      ['180¬∞C', '100¬∞C', '300¬∞C', '50¬∞C'],
      ['Prote√≠nas', 'Carbohidratos', 'Grasas saturadas', 'Az√∫cares'],
    ];
    explanations = [
      'Las prote√≠nas completas contienen todos los amino√°cidos esenciales.',
      'La cocci√≥n al vapor preserva mejor los nutrientes.',
      'Las vitaminas hidrosolubles se conservan mejor con este m√©todo.',
      'Esta temperatura es ideal para cocci√≥n saludable.',
      'Este nutriente es el principal aporte nutricional.',
    ];
  } else if (isProgramming) {
    questionTemplates = [
      `¬øQu√© patr√≥n de dise√±o se aplica en ${moduleTitle}?`,
      `¬øCu√°l es la complejidad temporal de ${moduleTitle}?`,
      `¬øQu√© estructura de datos se usa en ${moduleTitle}?`,
      `¬øCu√°l es el principio SOLID aplicado en ${moduleTitle}?`,
      `¬øQu√© algoritmo se implementa en ${moduleTitle}?`,
    ];
    optionTemplates = [
      ['Singleton', 'Factory', 'Observer', 'Decorator'],
      ['O(n)', 'O(log n)', 'O(n¬≤)', 'O(1)'],
      ['Array', 'Lista enlazada', 'Hash table', 'Stack'],
      [
        'Single Responsibility',
        'Open/Closed',
        'Liskov Substitution',
        'Interface Segregation',
      ],
      ['B√∫squeda binaria', 'Ordenamiento burbuja', 'Recursi√≥n', 'Iteraci√≥n'],
    ];
    explanations = [
      'Este patr√≥n es el m√°s apropiado para este caso de uso.',
      'Esta es la complejidad temporal correcta del algoritmo.',
      'Esta estructura de datos es la m√°s eficiente para este problema.',
      'Este principio SOLID se aplica directamente en esta situaci√≥n.',
      'Este algoritmo es el m√°s eficiente para resolver el problema.',
    ];
  } else if (isArt) {
    questionTemplates = [
      `¬øQu√© t√©cnica de color se usa en ${moduleTitle}?`,
      `¬øCu√°l es la regla de composici√≥n aplicada en ${moduleTitle}?`,
      `¬øQu√© material es m√°s apropiado para ${moduleTitle}?`,
      `¬øCu√°l es el principio de perspectiva en ${moduleTitle}?`,
      `¬øQu√© estilo art√≠stico se refleja en ${moduleTitle}?`,
    ];
    optionTemplates = [
      ['Complementarios', 'An√°logos', 'Monocrom√°ticos', 'Tri√°dicos'],
      ['Regla de tercios', 'Simetr√≠a', 'Punto de fuga', 'L√≠neas gu√≠a'],
      ['√ìleo', 'Acuarela', 'Carboncillo', 'L√°piz'],
      ['Punto de fuga', 'Escala de valores', 'Proporci√≥n √°urea', 'Contraste'],
      ['Realismo', 'Impresionismo', 'Abstracto', 'Cubismo'],
    ];
    explanations = [
      'Esta t√©cnica de color crea el efecto visual deseado.',
      'Esta regla de composici√≥n mejora la armon√≠a visual.',
      'Este material es el m√°s apropiado para la t√©cnica.',
      'Este principio de perspectiva es fundamental en la composici√≥n.',
      'Este estilo art√≠stico se refleja en las caracter√≠sticas visuales.',
    ];
  } else {
    // Fallback gen√©rico pero m√°s espec√≠fico
    questionTemplates = [
      `¬øCu√°l es el m√©todo principal utilizado en ${moduleTitle}?`,
      `¬øQu√© caracter√≠stica espec√≠fica define ${moduleTitle}?`,
      `¬øCu√°l es el proceso clave en ${moduleTitle}?`,
      `¬øQu√© elemento es fundamental en ${moduleTitle}?`,
      `¬øCu√°l es la t√©cnica principal de ${moduleTitle}?`,
    ];
    optionTemplates = [
      [
        'M√©todo principal',
        'M√©todo secundario',
        'M√©todo alternativo',
        'M√©todo b√°sico',
      ],
      [
        'Caracter√≠stica espec√≠fica',
        'Caracter√≠stica general',
        'Caracter√≠stica opcional',
        'Caracter√≠stica b√°sica',
      ],
      [
        'Proceso clave',
        'Proceso secundario',
        'Proceso alternativo',
        'Proceso b√°sico',
      ],
      [
        'Elemento fundamental',
        'Elemento secundario',
        'Elemento opcional',
        'Elemento b√°sico',
      ],
      [
        'T√©cnica principal',
        'T√©cnica secundaria',
        'T√©cnica alternativa',
        'T√©cnica b√°sica',
      ],
    ];
    explanations = [
      'Este m√©todo es el m√°s efectivo para lograr los objetivos.',
      'Esta caracter√≠stica es la que define espec√≠ficamente el concepto.',
      'Este proceso es esencial para el funcionamiento correcto.',
      'Este elemento es fundamental para el √©xito del m√©todo.',
      'Esta t√©cnica es la m√°s apropiada para la situaci√≥n.',
    ];
  }

  const templateIndex = (questionNumber - 1) % questionTemplates.length;

  return {
    question: questionTemplates[templateIndex],
    options: optionTemplates[templateIndex],
    correctAnswer: 0,
    explanation: explanations[templateIndex],
  };
}

// Funci√≥n para generar t√≠tulos espec√≠ficos de m√≥dulos usando IA
async function generateSpecificModuleTitles(
  courseTopic: string,
  existingTopics: string[],
  level: string
): Promise<string[]> {
  try {
    console.log('ü§ñ Generating specific module titles using AI...');

    const systemPrompt = `Eres un experto en educaci√≥n y dise√±o de cursos. Tu tarea es generar 5 t√≠tulos espec√≠ficos y descriptivos para los m√≥dulos de un curso, RESPETANDO EL NIVEL del estudiante.

REGLAS IMPORTANTES:
- Cada t√≠tulo debe ser espec√≠fico y descriptivo del contenido del m√≥dulo
- NO uses t√≠tulos gen√©ricos como "Tema 1", "M√≥dulo 2", etc.
- Los t√≠tulos deben ser diferentes entre s√≠ y cubrir aspectos √∫nicos del tema
- Cada t√≠tulo debe ser de 3-8 palabras
- Los t√≠tulos deben seguir un orden l√≥gico de progresi√≥n apropiado para el nivel
- Usa un lenguaje claro y profesional en espa√±ol

PROGRESI√ìN SEG√öN NIVEL:

üü¢ NIVEL BEGINNER (Principiante ABSOLUTO):
- Progresi√≥n MUY gradual entre m√≥dulos
- M√≥dulo 1: Conceptos b√°sicos y primeros pasos
- M√≥dulo 2: Segundo grupo de conceptos fundamentales
- M√≥dulo 3: Tercer grupo de conceptos b√°sicos
- M√≥dulo 4: Integraci√≥n de conceptos b√°sicos
- M√≥dulo 5: Primeras aplicaciones pr√°cticas simples
- NO incluir t√©rminos avanzados en los primeros m√≥dulos

EJEMPLO "PROGRAMACI√ìN DESDE CERO" BEGINNER: 1. Primeros Pasos, 2. Variables y Datos, 3. Condicionales, 4. Ciclos, 5. Funciones

TEMA DEL CURSO: ${courseTopic}
‚ö†Ô∏è NIVEL: ${level.toUpperCase()}
${level === 'beginner' ? '\n‚ö†Ô∏è CR√çTICO: Este es nivel BEGINNER - la progresi√≥n debe ser EXTREMADAMENTE gradual. Cada m√≥dulo debe construir sobre el anterior paso a paso.' : ''}

TOPICS EXISTENTES (si los hay): ${existingTopics.join(', ')}

Responde SOLO con un JSON v√°lido que contenga un array de 5 strings con los t√≠tulos de los m√≥dulos:
{
  "moduleTitles": [
    "T√≠tulo espec√≠fico del m√≥dulo 1",
    "T√≠tulo espec√≠fico del m√≥dulo 2", 
    "T√≠tulo espec√≠fico del m√≥dulo 3",
    "T√≠tulo espec√≠fico del m√≥dulo 4",
    "T√≠tulo espec√≠fico del m√≥dulo 5"
  ]
}`;

    const userPrompt = `Genera 5 t√≠tulos espec√≠ficos y descriptivos para los m√≥dulos de un curso sobre "${courseTopic}" (nivel: ${level}). 

‚ö†Ô∏è NIVEL: ${level.toUpperCase()} - ${level === 'beginner' ? 'PROGRESI√ìN MUY GRADUAL' : level === 'intermediate' ? 'PROGRESI√ìN MODERADA' : 'PROGRESI√ìN R√ÅPIDA'}

Los t√≠tulos deben ser:
- Espec√≠ficos y descriptivos (no gen√©ricos)
- Diferentes entre s√≠
- Ordenados con progresi√≥n apropiada para el nivel ${level}
${level === 'beginner' ? '- ‚ö†Ô∏è CR√çTICO: Progresi√≥n MUY gradual, conceptos b√°sicos paso a paso\n- Cada m√≥dulo debe introducir UN GRUPO de conceptos relacionados\n- NO saltar de conceptos b√°sicos a avanzados r√°pidamente' : ''}
- Relevantes al tema del curso
- En espa√±ol

Responde SOLO con el JSON solicitado.`;

    const response = await askClaude({
      system: systemPrompt,
      user: userPrompt,
    });

    // Intentar parsear la respuesta JSON
    let moduleTitles: string[] = [];

    try {
      const jsonResponse = JSON.parse(response);
      if (
        jsonResponse.moduleTitles &&
        Array.isArray(jsonResponse.moduleTitles)
      ) {
        moduleTitles = jsonResponse.moduleTitles.slice(0, 5);
      }
    } catch (parseError) {
      console.error('‚ùå Error parsing module titles JSON:', parseError);
      console.log('Raw response:', response);

      // Fallback: extraer t√≠tulos de la respuesta de texto
      const lines = response.split('\n').filter((line: string) => line.trim());
      moduleTitles = lines
        .map((line: string) =>
          line
            .replace(/^\d+\.?\s*/, '')
            .replace(/^[-*]\s*/, '')
            .trim()
        )
        .filter((title: string) => title.length > 0)
        .slice(0, 5);
    }

    // Asegurar que tenemos exactamente 5 t√≠tulos
    while (moduleTitles.length < 5) {
      const fallbackTitle = `Aspecto ${moduleTitles.length + 1} de ${courseTopic}`;
      moduleTitles.push(fallbackTitle);
    }

    console.log('‚úÖ Generated module titles:', moduleTitles);
    return moduleTitles;
  } catch (error) {
    console.error('‚ùå Error generating module titles:', error);

    // Fallback: generar t√≠tulos b√°sicos
    const fallbackTitles = [
      `Fundamentos de ${courseTopic}`,
      `Aplicaciones pr√°cticas de ${courseTopic}`,
      `T√©cnicas avanzadas de ${courseTopic}`,
      `Casos de uso de ${courseTopic}`,
      `Implementaci√≥n de ${courseTopic}`,
    ];

    console.log('üîÑ Using fallback module titles:', fallbackTitles);
    return fallbackTitles;
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Get user plan and interests, check course creation limits
    const user = await db.user.findUnique({
      where: { id: session.user.id },
      select: { plan: true, interests: true },
    });

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    // Count courses started this month (courses with UserProgress created this month)
    const startOfMonth = new Date();
    startOfMonth.setDate(1);
    startOfMonth.setHours(0, 0, 0, 0);

    const coursesStartedThisMonth = await db.userProgress.count({
      where: {
        userId: session.user.id,
        createdAt: {
          gte: startOfMonth,
        },
      },
    });

    // Check if user can create more courses based on their plan
    if (!canCreateCourse(user.plan as UserPlan, coursesStartedThisMonth)) {
      return NextResponse.json(
        {
          error: 'L√≠mite de cursos alcanzado para tu plan actual.',
          plan: user.plan,
          coursesStarted: coursesStartedThisMonth,
          upgradeRequired: true,
        },
        { status: 403 }
      );
    }

    // Skip legacy rate limit for now (optional re-implement if needed)

    const body = await request.json();
    const validatedData = CourseCreateRequestSchema.safeParse(body);

    if (!validatedData.success) {
      return NextResponse.json(
        {
          error: 'Invalid input data',
          fieldErrors: validatedData.error.flatten().fieldErrors,
        },
        { status: 400 }
      );
    }

    const { prompt, level } = validatedData.data;

    // Validate content for sensitive topics with fallback
    console.log('üîç Validating content for sensitive topics...');
    try {
      const contentValidation = await ContentValidator.validatePrompt(prompt);

      if (!contentValidation.isSafe) {
        console.log('‚ùå Content blocked:', contentValidation.reason);
        return NextResponse.json(
          {
            error: 'Content blocked',
            reason: contentValidation.reason,
            category: contentValidation.category,
            message: ContentValidator.getErrorMessage(
              contentValidation.category || 'other_risks'
            ),
          },
          { status: 403 }
        );
      }

      console.log('‚úÖ Content validation passed');
    } catch (validationError) {
      console.warn(
        '‚ö†Ô∏è Content validation failed due to technical issues, proceeding with course creation:',
        validationError
      );
      // Continue with course creation even if validation fails due to API issues
    }

    // Get user interests from profile
    const userInterests = safeJsonParseArray(user.interests);

    // Sanitize prompt (basic validation)
    if (prompt.length > 2000) {
      return NextResponse.json(
        { error: 'Prompt too long. Maximum 2000 characters allowed.' },
        { status: 400 }
      );
    }

    // Generate course ID
    const courseId = `course-${uuidv4()}`;

    // Map Spanish level to English enum
    const levelMap: Record<string, 'BEGINNER' | 'INTERMEDIATE' | 'ADVANCED'> = {
      principiante: 'BEGINNER',
      intermedio: 'INTERMEDIATE',
      avanzado: 'ADVANCED',
    };

    // Create course in database
    const course = await db.course.create({
      data: {
        courseId,
        userId: session.user.id,
        userPrompt: prompt,
        userLevel: levelMap[level] || 'BEGINNER',
        userInterests: JSON.stringify(userInterests),
        status: 'GENERATING_METADATA',
      },
    });

    // Log generation start
    await db.generationLog.create({
      data: {
        courseId: course.id, // Use the actual course ID, not the courseId string
        action: 'metadata_start',
        message: 'Starting metadata generation',
      },
    });

    try {
      console.log('üîÑ Starting course generation...');

      // Generar ContentDocument con Prompt Maestro
      const systemPrompt = ContractPromptBuilder.buildSystemPrompt('course');
      const userPrompt = ContractPromptBuilder.buildUserPrompt('course', {
        topic: prompt,
        level,
        interests: userInterests,
      });

      console.log('ü§ñ Calling Anthropic API...');
      const raw = await askClaude({ system: systemPrompt, user: userPrompt });
      try {
        console.log('üìù [AI][Course] Raw length:', raw?.length);
        console.log('üìù [AI][Course] Raw preview:', String(raw).slice(0, 600));
      } catch (_) {}

      let doc: ContentDocument;
      try {
        // Intentar parsear directamente primero
        doc = JSON.parse(raw);
        console.log('‚úÖ ContentDocument parsed successfully');
      } catch (parseError) {
        console.error('‚ùå JSON parse error:', parseError);
        console.log('üîß Attempting to salvage JSON...');

        // Intentar reparar JSON malformado
        const repairedJson = repairMalformedJson(raw);
        if (repairedJson) {
          try {
            doc = JSON.parse(repairedJson);
            console.log('‚úÖ ContentDocument repaired and parsed successfully');
          } catch (repairError) {
            console.error('‚ùå Repair failed:', repairError);
            doc = createFallbackContentDocument(prompt, level);
          }
        } else {
          // if model wrapped with markdown, try to salvage
          const start = raw.indexOf('{');
          const end = raw.lastIndexOf('}');
          if (start >= 0 && end > start) {
            try {
              const jsonSlice = raw.slice(start, end + 1);
              const repairedSlice = repairMalformedJson(jsonSlice);
              doc = JSON.parse(repairedSlice || jsonSlice);
              console.log('‚úÖ ContentDocument salvaged from markdown');
            } catch (salvageError) {
              console.error('‚ùå Salvage failed:', salvageError);
              console.log('üÜò Creating fallback ContentDocument...');
              doc = createFallbackContentDocument(prompt, level);
            }
          } else {
            console.log('üÜò Creating fallback ContentDocument...');
            doc = createFallbackContentDocument(prompt, level);
          }
        }
      }

      // Funci√≥n para reparar JSON malformado
      function repairMalformedJson(jsonString: string): string | null {
        try {
          // Intentar reparar problemas comunes de JSON malformado
          let repaired = jsonString;

          // 1. Limpiar caracteres de control problem√°ticos m√°s agresivamente
          repaired = repaired.replace(/[\x00-\x1F\x7F]/g, '');

          // 2. Limpiar caracteres de control espec√≠ficos que causan problemas
          repaired = repaired.replace(/[\u0000-\u001F\u007F-\u009F]/g, '');

          // 3. Escapar caracteres problem√°ticos en strings
          repaired = repaired.replace(/\\(?!["\\/bfnrt])/g, '\\\\');

          // 4. Limpiar texto adicional despu√©s del JSON
          const jsonStart = repaired.indexOf('{');
          const jsonEnd = repaired.lastIndexOf('}');
          if (jsonStart >= 0 && jsonEnd > jsonStart) {
            repaired = repaired.substring(jsonStart, jsonEnd + 1);
          }

          // 5. Cerrar strings no terminados
          repaired = repaired.replace(/"([^"]*)$/gm, '"$1"');

          // 6. Cerrar arrays no terminados
          const openBrackets = (repaired.match(/\[/g) || []).length;
          const closeBrackets = (repaired.match(/\]/g) || []).length;
          if (openBrackets > closeBrackets) {
            repaired += ']'.repeat(openBrackets - closeBrackets);
          }

          // 7. Cerrar objetos no terminados
          const openBraces = (repaired.match(/\{/g) || []).length;
          const closeBraces = (repaired.match(/\}/g) || []).length;
          if (openBraces > closeBraces) {
            repaired += '}'.repeat(openBraces - closeBraces);
          }

          // 8. Agregar comas faltantes entre elementos de array
          repaired = repaired.replace(/"\s*\n\s*"/g, '",\n"');
          repaired = repaired.replace(/}\s*\n\s*{/g, '},\n{');
          repaired = repaired.replace(/]\s*\n\s*\[/g, '],\n[');

          // 9. Agregar comas faltantes antes de cierre de array/objeto
          repaired = repaired.replace(/([^,}\]])\s*([}\]])/g, '$1,$2');

          // 10. Limpiar comas duplicadas
          repaired = repaired.replace(/,+/g, ',');
          repaired = repaired.replace(/,(\s*[}\]])/g, '$1');

          // 11. Limpiar saltos de l√≠nea problem√°ticos en strings
          repaired = repaired.replace(/"([^"]*)\n([^"]*)"/g, '"$1 $2"');

          // 12. Limpiar caracteres de escape problem√°ticos
          repaired = repaired.replace(/\\"/g, '"');
          repaired = repaired.replace(/\\n/g, ' ');
          repaired = repaired.replace(/\\t/g, ' ');
          repaired = repaired.replace(/\\r/g, ' ');

          // Verificar que el JSON reparado sea v√°lido
          JSON.parse(repaired);
          return repaired;
        } catch (error) {
          console.error('‚ùå JSON repair failed:', error);
          return null;
        }
      }

      // Funci√≥n para crear ContentDocument de fallback sustancial
      function createFallbackContentDocument(
        prompt: string,
        level: string
      ): ContentDocument {
        const timestamp = Date.now();
        return {
          version: '1.0',
          locale: 'es',
          content_id: `fallback-${timestamp}`,
          meta: {
            topic: prompt,
            audience: 'Estudiantes y profesionales',
            level: level as 'beginner' | 'intermediate' | 'advanced',
            created_at: new Date().toISOString().split('T')[0],
          },
          blocks: [
            {
              id: `intro_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: prompt },
            },
            {
              id: `intro_p_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `En este curso aprender√°s sobre ${prompt}. Exploraremos los conceptos fundamentales, implementaci√≥n pr√°ctica, ejemplos avanzados y aplicaciones reales para que puedas dominar completamente este tema.`,
              },
            },
            {
              id: `importance_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: '¬øPor qu√© es importante?' },
            },
            {
              id: `importance_p_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Dominar ${prompt} es fundamental en el desarrollo de software moderno. Te permitir√° crear aplicaciones m√°s eficientes, escalables y mantenibles, adem√°s de abrirte oportunidades profesionales en empresas de tecnolog√≠a l√≠deres.`,
              },
            },
            {
              id: `benefits_${timestamp}`,
              type: 'list',
              data: {
                style: 'bulleted',
                items: [
                  'Mejora la eficiencia de tus aplicaciones',
                  'Facilita el mantenimiento del c√≥digo',
                  'Permite escalabilidad en proyectos grandes',
                  'Abre oportunidades profesionales',
                  'Desarrolla pensamiento algor√≠tmico',
                ],
              },
            },
            {
              id: `fundamentals_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Conceptos fundamentales' },
            },
            {
              id: `fundamentals_p_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Los conceptos fundamentales de ${prompt} incluyen principios te√≥ricos s√≥lidos, patrones de dise√±o reconocidos y mejores pr√°cticas de la industria. Comprender estos fundamentos es crucial para aplicar correctamente las t√©cnicas en proyectos reales.`,
              },
            },
            {
              id: `implementation_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Implementaci√≥n pr√°ctica' },
            },
            {
              id: `implementation_p_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `La implementaci√≥n pr√°ctica te permitir√° aplicar los conceptos te√≥ricos en c√≥digo real. Trabajaremos con ejemplos progresivos que van desde casos b√°sicos hasta implementaciones avanzadas y optimizadas.`,
              },
            },
            {
              id: `examples_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Ejemplos y casos de uso' },
            },
            {
              id: `examples_p_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Exploraremos ejemplos reales de ${prompt} utilizados en aplicaciones como redes sociales, sistemas de recomendaci√≥n, motores de b√∫squeda y plataformas de e-commerce. Cada ejemplo incluye c√≥digo funcional y explicaciones detalladas.`,
              },
            },
            {
              id: `best_practices_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Mejores pr√°cticas' },
            },
            {
              id: `best_practices_p_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Aprender√°s las mejores pr√°cticas de la industria para implementar ${prompt} de manera eficiente y mantenible. Incluye patrones de dise√±o, optimizaci√≥n de rendimiento y t√©cnicas de debugging.`,
              },
            },
            {
              id: `tip_${timestamp}`,
              type: 'callout',
              data: {
                kind: 'tip',
                text: `La pr√°ctica constante es clave para dominar ${prompt}. Te recomendamos implementar los ejemplos y experimentar con variaciones para consolidar tu aprendizaje.`,
              },
            },
            {
              id: `conclusion_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Conclusi√≥n' },
            },
            {
              id: `conclusion_p_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Al completar este curso, tendr√°s una comprensi√≥n s√≥lida de ${prompt} y podr√°s aplicarlo en proyectos profesionales. El conocimiento adquirido te preparar√° para enfrentar desaf√≠os complejos en el desarrollo de software.`,
              },
            },
            {
              id: `course_topics_${timestamp}`,
              type: 'list',
              data: {
                style: 'bulleted',
                items: [
                  'Conceptos fundamentales',
                  'Implementaci√≥n pr√°ctica',
                  'Ejemplos avanzados',
                  'Aplicaciones reales',
                  'Mejores pr√°cticas',
                ],
              },
            },
          ],
        };
      }

      // Normalize permissive variants to the strict contract
      console.log('üîß Normalizing ContentDocument...');
      doc = normalizeToContract(doc);

      console.log('‚úÖ Validating ContentDocument...');
      const validation = ContentContractValidator.validateDocument(doc);
      if (!validation.isValid) {
        console.error(
          '‚ùå ContentDocument validation errors:',
          validation.errors
        );
        try {
          console.error(
            'üì¶ ContentDocument received:',
            JSON.stringify(doc).slice(0, 2000)
          );
        } catch (_) {}
        await db.course.update({
          where: { courseId },
          data: { status: 'FAILED' },
        });
        return NextResponse.json(
          { error: 'Invalid ContentDocument', errors: validation.errors },
          { status: 422 }
        );
      }
      console.log('‚úÖ ContentDocument validation passed');

      // Guardar en memoria y vincular a curso
      contentStore.save(doc);
      contentStore.linkCourse(course.id, doc.content_id);

      // Derivar metadata m√≠nima y m√≥dulo 1 + chunks desde ContentDocument
      const blocks = Array.isArray(doc.blocks) ? doc.blocks : [];
      const firstParagraph = String(
        (blocks.find(b => b.type === 'paragraph') as any)?.data?.text ||
          doc.meta.topic ||
          ''
      ).slice(0, 500);

      // Extraer topics del ContentDocument (bloque especial course_topics)
      let courseTopics: string[] = [];
      const topicsBlock = blocks.find(
        b => b.id === 'course_topics' && b.type === 'list'
      );
      if (
        topicsBlock &&
        topicsBlock.type === 'list' &&
        'items' in topicsBlock.data
      ) {
        courseTopics = topicsBlock.data.items.slice(0, 5); // M√°ximo 5 topics
      }

      // Siempre generar topics espec√≠ficos como conceptos clave (no lecciones)
      if (courseTopics.length < 5) {
        const specificTopics = await generateSpecificCourseTopics(
          doc.meta.topic,
          courseTopics,
          level
        );
        courseTopics = [...courseTopics, ...specificTopics].slice(0, 5);
      }

      // Extraer t√≠tulos de m√≥dulos a partir de headings H2/H3 √∫nicos
      const headingTexts: string[] = [];
      const seen = new Set<string>();
      for (const b of blocks) {
        if (b.type === 'heading') {
          const lvl = (b as any).data?.level;
          const txt = String((b as any).data?.text || '').trim();
          if ((lvl === 2 || lvl === 3) && txt) {
            const key = txt.toLowerCase();
            if (!seen.has(key)) {
              seen.add(key);
              headingTexts.push(txt);
            }
          }
        }
      }

      // Generar 5 t√≠tulos de m√≥dulos espec√≠ficos usando IA
      const totalModules = 5;
      const lessonsPerModule = 5;

      // Generar t√≠tulos espec√≠ficos de m√≥dulos usando IA
      const moduleTopics = await generateSpecificModuleTitles(
        doc.meta.topic,
        courseTopics,
        level
      );

      console.log('üìö Module topics generated:', moduleTopics);

      // Crear estructura de m√≥dulos con t√≠tulos espec√≠ficos
      const orderedModules: {
        title: string;
        lessons: { title: string; blocks: any[]; videoData?: string | null }[];
        quizQuestions?: any[];
      }[] = moduleTopics.map((topic, index) => ({
        title: topic,
        lessons: [],
        quizQuestions: [],
      }));

      function sanitizeTitle(input: string | undefined): string {
        const txt = String(input || '').trim();
        // Quitar prefijos gen√©ricos como "M√≥dulo 1", "Modulo 1", etc.
        const cleaned = txt.replace(/^m[o√≥]dulo\s+\d+\s*:?/i, '').trim();
        return cleaned || txt;
      }

      // Usar los t√≠tulos espec√≠ficos de los m√≥dulos
      const moduleTitles: string[] = orderedModules.map((m, i) => m.title);

      // Funci√≥n para generar t√≠tulos espec√≠ficos de lecciones para cada m√≥dulo
      async function generateSpecificLessonTitles(
        moduleTitle: string,
        courseTopic: string,
        level: string
      ): Promise<string[]> {
        try {
          console.log('ü§ñ Generating specific lesson titles using AI...');

          const systemPrompt = `Eres un experto en dise√±o de contenido educativo. Tu tarea es generar 5 t√≠tulos de lecciones espec√≠ficas y √∫nicas para un m√≥dulo.

REGLAS CR√çTICAS:
- Cada lecci√≥n debe ser √öNICA y espec√≠fica del m√≥dulo
- NO uses plantillas gen√©ricas como "Fundamentos", "Conclusi√≥n", "¬øPara qu√© es necesario?"
- Cada t√≠tulo debe ser ACCIONABLE y CONCRETO
- Evita t√≠tulos vagos o gen√©ricos
- Las lecciones deben cubrir subtemas distintos sin solaparse
- Cada lecci√≥n debe mapearse directamente al tema del m√≥dulo

FORMATO DE SALIDA:
Responde SOLO con un JSON v√°lido que contenga un array de 5 t√≠tulos:
{
  "lessonTitles": [
    "T√≠tulo espec√≠fico y accionable 1",
    "T√≠tulo espec√≠fico y accionable 2",
    "T√≠tulo espec√≠fico y accionable 3",
    "T√≠tulo espec√≠fico y accionable 4",
    "T√≠tulo espec√≠fico y accionable 5"
  ]
}

EJEMPLOS BUENOS:
- Para "Manipulaci√≥n de datos": ["Manejo de errores b√°sicos en pipelines", "T√©cnicas de limpieza y normalizaci√≥n", "Preparaci√≥n de datos para modelos", "Tratamiento de valores nulos", "Optimizaci√≥n de rendimiento en procesamiento"]
- Para "Cocina saludable": ["Selecci√≥n y almacenamiento de ingredientes frescos", "T√©cnicas de cocci√≥n que preservan nutrientes", "Combinaci√≥n de sabores y texturas", "Adaptaci√≥n de recetas tradicionales", "Planificaci√≥n de men√∫s equilibrados"]

EJEMPLOS MALOS (NO USAR):
- "Fundamentos", "Introducci√≥n", "Conclusi√≥n", "¬øPara qu√© es necesario?", "Conceptos b√°sicos"`;

          const userPrompt = `Genera 5 t√≠tulos de lecciones espec√≠ficas y √∫nicas para el m√≥dulo "${moduleTitle}" del curso sobre "${courseTopic}" (nivel: ${level}).

IMPORTANTE:
- Los t√≠tulos deben ser espec√≠ficos del tema del m√≥dulo
- Deben ser accionables y concretos
- No uses plantillas gen√©ricas
- Cada lecci√≥n debe abordar un subtema distinto
- Los t√≠tulos deben reflejar el contenido espec√≠fico que se ense√±ar√°

M√ìDULO: ${moduleTitle}
CURSO: ${courseTopic}
NIVEL: ${level}

Responde SOLO con el JSON solicitado.`;

          const response = await askClaude({
            system: systemPrompt,
            user: userPrompt,
          });

          // Intentar parsear la respuesta JSON
          let lessonTitles: string[] = [];

          try {
            const jsonResponse = JSON.parse(response);
            if (
              jsonResponse.lessonTitles &&
              Array.isArray(jsonResponse.lessonTitles)
            ) {
              lessonTitles = jsonResponse.lessonTitles.slice(0, 5);
            }
          } catch (parseError) {
            console.error('‚ùå Error parsing lesson titles JSON:', parseError);
            console.log('Raw response:', response);

            // Fallback: extraer t√≠tulos del texto si el JSON falla
            const lines = response.split('\n').filter(line => line.trim());
            lessonTitles = lines
              .filter(line => line.match(/^\d+\.|^[-*]\s/))
              .map(line => line.replace(/^\d+\.\s*|^[-*]\s*/, '').trim())
              .slice(0, 5);
          }

          // Asegurar que tenemos exactamente 5 t√≠tulos
          while (lessonTitles.length < 5) {
            lessonTitles.push(
              `Lecci√≥n espec√≠fica ${lessonTitles.length + 1} de ${moduleTitle}`
            );
          }

          console.log('‚úÖ Generated specific lesson titles:', lessonTitles);
          return lessonTitles;
        } catch (error) {
          console.error('‚ùå Error generating specific lesson titles:', error);

          // Fallback: t√≠tulos espec√≠ficos basados en el m√≥dulo
          return generateFallbackLessonTitles(moduleTitle, courseTopic);
        }
      }

      // Funci√≥n para generar t√≠tulos de fallback espec√≠ficos
      function generateFallbackLessonTitles(
        moduleTitle: string,
        courseTopic: string
      ): string[] {
        const moduleLower = moduleTitle.toLowerCase();
        const courseLower = courseTopic.toLowerCase();

        // T√≠tulos espec√≠ficos basados en el tema del m√≥dulo
        if (
          moduleLower.includes('manipulaci√≥n') ||
          moduleLower.includes('datos')
        ) {
          return [
            'Manejo de errores b√°sicos en pipelines de datos',
            'T√©cnicas de limpieza y normalizaci√≥n',
            'Preparaci√≥n de datos para modelos',
            'Tratamiento de valores nulos y outliers',
            'Optimizaci√≥n de rendimiento en procesamiento',
          ];
        } else if (
          moduleLower.includes('cocina') ||
          moduleLower.includes('receta') ||
          courseLower.includes('comida')
        ) {
          return [
            'Selecci√≥n y almacenamiento de ingredientes frescos',
            'T√©cnicas de cocci√≥n que preservan nutrientes',
            'Combinaci√≥n de sabores y texturas equilibradas',
            'Adaptaci√≥n de recetas tradicionales a versiones saludables',
            'Planificaci√≥n de men√∫s semanales balanceados',
          ];
        } else if (
          moduleLower.includes('programaci√≥n') ||
          moduleLower.includes('c√≥digo') ||
          courseLower.includes('python')
        ) {
          return [
            'Configuraci√≥n del entorno de desarrollo',
            'Estructuras de datos fundamentales',
            'Control de flujo y funciones',
            'Manejo de errores y debugging',
            'Mejores pr√°cticas y optimizaci√≥n',
          ];
        } else if (
          moduleLower.includes('arte') ||
          moduleLower.includes('dibujo') ||
          courseLower.includes('creativo')
        ) {
          return [
            'Fundamentos de composici√≥n visual',
            'T√©cnicas de color y contraste',
            'Perspectiva y proporciones',
            'Estilos y expresi√≥n personal',
            'Proyecto final integrador',
          ];
        } else {
          // Fallback gen√©rico pero m√°s espec√≠fico
          return [
            `Fundamentos espec√≠ficos de ${moduleTitle}`,
            `Aplicaciones pr√°cticas en ${moduleTitle}`,
            `T√©cnicas avanzadas de ${moduleTitle}`,
            `Casos de uso reales de ${moduleTitle}`,
            `Integraci√≥n y mejores pr√°cticas de ${moduleTitle}`,
          ];
        }
      }

      // Funci√≥n para generar lecciones completas e individuales usando IA
      async function generateCompleteLessonsForModule(
        moduleTitle: string,
        courseTopic: string,
        level: string
      ) {
        const lessons = [];
        // Generate specific lesson titles for this module
        const lessonTitles = await generateSpecificLessonTitles(
          moduleTitle,
          courseTopic,
          level
        );

        console.log(
          `üéØ Generating 5 complete lessons for module: ${moduleTitle}`
        );

        for (let i = 0; i < lessonTitles.length; i++) {
          const lessonTitle = lessonTitles[i];
          const lessonNumber = i + 1;

          try {
            console.log(
              `üìö Generating lesson ${lessonNumber}/5: ${lessonTitle}`
            );

            // Generar lecci√≥n completa usando IA
            const systemPrompt =
              ContractPromptBuilder.buildSystemPrompt('chunk');
            const userPrompt = ContractPromptBuilder.buildUserPrompt('chunk', {
              topic: courseTopic,
              level: level,
              interests: [],
              moduleTitle: moduleTitle,
              lessonTitle: lessonTitle,
              lessonNumber: lessonNumber,
              totalLessons: 5,
            });

            const aiResponse = await generateCourseMetadata(
              userPrompt,
              level,
              []
            );

            // Parsear y normalizar la respuesta con parser robusto
            let lessonDoc;
            try {
              console.log('üîß Parsing AI response with robust parser...');
              lessonDoc = parseAIJsonRobust(aiResponse);
              
              // Reparar documento si es necesario
              lessonDoc = repairContentDocument(lessonDoc);
              
              console.log('‚úÖ JSON parsed and repaired successfully');
            } catch (parseError) {
              console.error('‚ùå JSON parse error for lesson:', parseError);
              console.log('üîÑ Retrying lesson generation with stricter JSON instructions...');
              
              // RETRY: Intentar una vez m√°s con instrucciones m√°s estrictas
              try {
                const retryPrompt = ContractPromptBuilder.buildUserPrompt('chunk', {
                  topic: courseTopic,
                  level: level as 'beginner' | 'intermediate' | 'advanced',
                  interests: [],
                  lessonTitle: lessonTitle,
                  lessonNumber: lessonNumber,
                  totalLessons: 5,
                });
                
                const stricterPrompt = `${retryPrompt}

‚ö†Ô∏è CR√çTICO - FORMATO JSON ESTRICTO:
- Verifica que TODAS las comillas est√©n cerradas
- Verifica que TODAS las comas est√©n presentes
- Verifica que TODOS los corchetes [] y llaves {} est√©n balanceados
- NO incluyas saltos de l√≠nea dentro de strings
- USA comillas dobles " no simples '
- Despu√©s de CADA propiedad debe haber una coma, excepto la √∫ltima

Revisa el JSON ANTES de responder. Debe ser 100% v√°lido.`;

                const retryResponse = await generateCourseMetadata(
                  stricterPrompt,
                  level,
                  []
                );
                
                console.log('üîß Parsing retry response...');
                lessonDoc = parseAIJsonRobust(retryResponse);
                lessonDoc = repairContentDocument(lessonDoc);
                console.log('‚úÖ Retry successful!');
                
              } catch (retryError) {
                console.error('‚ùå Retry also failed:', retryError);
                console.error('AI Response preview:', aiResponse.substring(0, 500));
                throw new Error(`No valid JSON found after retry: ${parseError instanceof Error ? parseError.message : String(parseError)}`);
              }
            }

            // Normalizar y validar
            const normalizedDoc = normalizeToContract(lessonDoc);
            const validationResult =
              ContentContractValidator.validateDocument(normalizedDoc);

            if (!validationResult.isValid) {
              console.error(
                '‚ùå Content validation failed for lesson:',
                validationResult.errors
              );
              throw new Error(
                `Invalid ContentDocument: ${validationResult.errors.join(', ')}`
              );
            }

            // Buscar video para la segunda lecci√≥n (Fundamentos)
            let videoData = null;
            if (lessonNumber === 2) {
              try {
                console.log(
                  `üé• Searching for video for lesson 2: ${lessonTitle}`
                );
                // Crear una consulta de b√∫squeda espec√≠fica del m√≥dulo
                const moduleSpecificQuery = `${moduleTitle} ${lessonTitle}`;

                const video = await YouTubeService.findVideoForChunk(
                  moduleSpecificQuery,
                  JSON.stringify(normalizedDoc.blocks),
                  courseTopic,
                  lessonNumber
                );
                if (video) {
                  videoData = JSON.stringify(video);
                  console.log(`‚úÖ Video found for lesson 2: ${video.title}`);
                } else {
                  console.log(`‚ö†Ô∏è No video found for lesson 2: ${lessonTitle}`);
                }
              } catch (videoError) {
                console.error(
                  `‚ùå Error searching for video for lesson 2:`,
                  videoError
                );
                // No lanzar error, continuar sin video
              }
            }

            lessons.push({
              title: lessonTitle,
              blocks: normalizedDoc.blocks,
              contentDocument: normalizedDoc,
              videoData: videoData,
            });

            console.log(
              `‚úÖ Lesson ${lessonNumber} generated successfully with ${normalizedDoc.blocks.length} blocks${videoData ? ' and video' : ''}`
            );

            // Peque√±a pausa entre lecciones para no sobrecargar la IA
            await new Promise(resolve => setTimeout(resolve, 500));
          } catch (error) {
            console.error(`‚ùå Error generating lesson ${lessonNumber}:`, error);
            // Fallback: mostrar error claro en lugar de contenido gen√©rico
            const errorMessage =
              error instanceof Error ? error.message : String(error);
            throw new Error(
              `Error generando lecci√≥n "${lessonTitle}": ${errorMessage}. Por favor, intenta crear el curso nuevamente.`
            );
          }
        }

        // Generar preguntas de quiz basadas en el contenido del m√≥dulo
        console.log(`üìù Generating quiz questions for module: ${moduleTitle}`);
        const moduleContent = lessons
          .map(lesson => `${lesson.title}: ${JSON.stringify(lesson.blocks)}`)
          .join('\n\n');

        const quizQuestions = await generateQuizQuestions(
          moduleTitle,
          moduleContent,
          courseTopic,
          level
        );

        return {
          lessons,
          quizQuestions,
        };
      }

      // Funci√≥n para encontrar puntos naturales de divisi√≥n en el contenido
      function findNaturalDivisionPoints(blocks: any[]): number[] {
        const points: number[] = [];

        // Buscar H2, H3, listas largas, c√≥digo, etc.
        blocks.forEach((block, index) => {
          if (
            block.type === 'heading' &&
            (block.data?.level === 2 || block.data?.level === 3)
          ) {
            points.push(index);
          } else if (block.type === 'list' && block.data?.items?.length > 3) {
            points.push(index);
          } else if (
            block.type === 'code' &&
            block.data?.snippet?.length > 100
          ) {
            points.push(index);
          }
        });

        return points;
      }

      // Funci√≥n para extraer t√≠tulos de lecciones del contenido
      function extractLessonTitle(
        blocks: any[],
        moduleTitle: string,
        lessonNumber: number
      ) {
        // Buscar el primer heading en los bloques
        const heading = blocks.find(b => b.type === 'heading');
        if (heading && heading.data?.text) {
          return heading.data.text;
        }

        // Buscar p√°rrafos que puedan ser t√≠tulos
        const paragraph = blocks.find(
          b => b.type === 'paragraph' && b.data?.text?.length < 100
        );
        if (paragraph && paragraph.data?.text) {
          return paragraph.data.text;
        }

        // Generar t√≠tulo basado en el contenido
        return generateDynamicLessonTitle(blocks, moduleTitle, lessonNumber);
      }

      // Funci√≥n para generar t√≠tulos din√°micos basados en el contenido
      function generateDynamicLessonTitle(
        blocks: any[],
        moduleTitle: string,
        lessonNumber: number
      ) {
        const keywords = extractKeywords(blocks);
        const moduleKeywords = moduleTitle.toLowerCase().split(' ').slice(0, 2);

        const lessonTemplates = [
          `Introducci√≥n a ${keywords[0] || moduleKeywords[0]}`,
          `Conceptos fundamentales de ${keywords[0] || moduleKeywords[0]}`,
          `Implementaci√≥n pr√°ctica de ${keywords[0] || moduleKeywords[0]}`,
          `Casos de uso avanzados`,
          `Mejores pr√°cticas y optimizaci√≥n`,
          `Aplicaciones en el mundo real`,
        ];

        return (
          lessonTemplates[lessonNumber - 1] ||
          `Lecci√≥n ${lessonNumber}: ${moduleTitle}`
        );
      }

      // Funci√≥n para extraer palabras clave del contenido
      function extractKeywords(blocks: any[]): string[] {
        const keywords: string[] = [];
        const commonWords = [
          'el',
          'la',
          'de',
          'en',
          'y',
          'a',
          'que',
          'es',
          'con',
          'para',
          'por',
          'del',
          'las',
          'los',
          'un',
          'una',
        ];

        blocks.forEach(block => {
          if (block.type === 'paragraph' && block.data?.text) {
            const words = block.data.text
              .toLowerCase()
              .replace(/[^\w\s]/g, '')
              .split(/\s+/)
              .filter(
                (word: string) => word.length > 3 && !commonWords.includes(word)
              );
            keywords.push(...words.slice(0, 3));
          }
        });

        return [...new Set(keywords)].slice(0, 3);
      }

      // Funci√≥n para generar lecciones placeholder para m√≥dulos 2-5
      function generatePlaceholderLessons(moduleTitle: string) {
        const lessons = [];
        for (let i = 0; i < 5; i++) {
          const lessonNumber = i + 1;
          const title = generateDescriptiveLessonTitle(
            [],
            moduleTitle,
            lessonNumber
          );
          lessons.push({
            title,
            blocks: [
              {
                id: `placeholder_${i}`,
                type: 'paragraph',
                data: {
                  text: `Esta lecci√≥n se est√° generando. Contenido sobre ${title.toLowerCase()} de ${moduleTitle.toLowerCase()}.`,
                },
              },
            ],
          });
        }
        return lessons;
      }

      // Dividir en m√≥dulos (H2) y lecciones (H3 o agrupaci√≥n equilibrada)
      function divideIntoModulesAndLessons(
        allBlocks: any[],
        total: number,
        perModule: number
      ) {
        type Lesson = { title: string; blocks: any[] };
        type Mod = { title: string; blocks: any[]; lessons: Lesson[] };
        const modules: Mod[] = [];

        // Detectar H2 como inicio de m√≥dulo
        const h2Indices: { idx: number; text: string }[] = [];
        allBlocks.forEach((b, i) => {
          if (b.type === 'heading' && b.data?.level === 2) {
            h2Indices.push({ idx: i, text: String(b.data.text || '').trim() });
          }
        });

        if (h2Indices.length === 0) {
          // Fallback: crear m√≥dulos por tama√±o
          const size = Math.max(1, Math.ceil(allBlocks.length / total));
          for (let m = 0; m < total; m++) {
            const start = m * size;
            const end = Math.min(allBlocks.length, start + size);
            const blk = allBlocks.slice(start, end);
            const title = String(
              (blk.find((b: any) => b.type === 'heading') as any)?.data?.text ||
                `M√≥dulo ${m + 1}`
            ).trim();
            modules.push({ title, blocks: blk, lessons: [] });
          }
        } else {
          // Particionar por H2
          for (let m = 0; m < Math.min(total, h2Indices.length); m++) {
            const start = h2Indices[m].idx;
            const end = h2Indices[m + 1]
              ? h2Indices[m + 1].idx
              : allBlocks.length;
            const blk = allBlocks.slice(start, end);
            modules.push({
              title: h2Indices[m].text,
              blocks: blk,
              lessons: [],
            });
          }
          // Si faltan m√≥dulos, completar por tama√±o
          for (let m = modules.length; m < total; m++) {
            modules.push({ title: `M√≥dulo ${m + 1}`, blocks: [], lessons: [] });
          }
        }

        // Dentro de cada m√≥dulo, dividir por H3 y completar hasta perModule
        for (const mod of modules) {
          const h3s: { idx: number; text: string }[] = [];
          mod.blocks.forEach((b: any, i: number) => {
            if (b.type === 'heading' && b.data?.level === 3) {
              h3s.push({ idx: i, text: String(b.data.text || '').trim() });
            }
          });

          const lessons: Lesson[] = [];
          if (h3s.length > 0) {
            for (let i = 0; i < h3s.length && lessons.length < perModule; i++) {
              const start = h3s[i].idx;
              const end = h3s[i + 1] ? h3s[i + 1].idx : mod.blocks.length;
              const lb = mod.blocks.slice(start, end);
              lessons.push({
                title: h3s[i].text,
                blocks: ensureCompleteLessonStructure(lb, h3s[i].text),
              });
            }
          }

          // Si no hay suficientes H3, dividir por tama√±o equilibrado
          if (lessons.length < perModule) {
            const remaining = perModule - lessons.length;
            const available =
              lessons.length === 0
                ? mod.blocks
                : mod.blocks.slice(h3s[h3s.length - 1]?.idx || 0);
            const size = Math.max(1, Math.ceil(available.length / remaining));
            for (let i = 0; i < remaining; i++) {
              const start = i * size;
              const end = Math.min(available.length, start + size);
              const lb = available.slice(start, end);
              // Siempre usar t√≠tulos descriptivos, independientemente del contenido
              const lessonNumber = lessons.length + 1;
              const descriptiveTitle = generateDescriptiveLessonTitle(
                lb,
                sanitizeTitle(mod.title),
                lessonNumber
              );
              lessons.push({
                title: descriptiveTitle,
                blocks: ensureCompleteLessonStructure(
                  generateCompleteLessonContent(
                    descriptiveTitle,
                    sanitizeTitle(mod.title)
                  ),
                  descriptiveTitle
                ),
              });
              if (lessons.length >= perModule) break;
            }
          }

          mod.lessons = lessons.slice(0, perModule);
        }

        // Asegurar longitud exacta
        return modules.slice(0, total);
      }

      // Funci√≥n para asegurar estructura completa de lecci√≥n
      function ensureCompleteLessonStructure(blocks: any[], title: string) {
        let structuredBlocks = [...blocks];

        // Eliminar headings duplicados con el mismo t√≠tulo dentro de la lecci√≥n (excepto el primero)
        const normalizedTitle = title.trim().toLowerCase();
        let seenTitleHeading = false;
        structuredBlocks = structuredBlocks.filter(block => {
          if (block.type === 'heading') {
            const txt = String(block.data?.text || '')
              .trim()
              .toLowerCase();
            if (txt === normalizedTitle) {
              if (seenTitleHeading) {
                return false; // descartar duplicados
              }
              seenTitleHeading = true;
            }
          }
          return true;
        });

        // Si la lecci√≥n est√° vac√≠a o solo tiene un t√≠tulo, generar contenido completo
        if (structuredBlocks.length <= 1) {
          structuredBlocks = generateCompleteLessonContent(title);
        } else {
          // Verificar si tiene introducci√≥n (p√°rrafo despu√©s del t√≠tulo)
          const hasIntro = structuredBlocks.some(
            (block, index) =>
              index > 0 &&
              block.type === 'paragraph' &&
              structuredBlocks[index - 1].type === 'heading'
          );

          if (!hasIntro && structuredBlocks.length > 1) {
            // Agregar p√°rrafo introductorio si no existe
            const introBlock = {
              id: `intro_${Date.now()}`,
              type: 'paragraph',
              data: {
                text: `En esta lecci√≥n exploraremos ${title.toLowerCase()}. Aprenderemos los conceptos fundamentales y veremos ejemplos pr√°cticos de implementaci√≥n.`,
              },
            };
            structuredBlocks.splice(1, 0, introBlock);
          }

          // Verificar si tiene conclusi√≥n
          const hasConclusion = structuredBlocks.some(
            block =>
              block.type === 'heading' &&
              (block.data?.text?.toLowerCase().includes('conclusi√≥n') ||
                block.data?.text?.toLowerCase().includes('resumen'))
          );

          if (!hasConclusion) {
            // Agregar conclusi√≥n si no existe
            const conclusionBlock = {
              id: `conclusion_${Date.now()}`,
              type: 'heading',
              data: {
                level: 2,
                text: `Resumen de ${title}`,
              },
            };
            const summaryBlock = {
              id: `summary_${Date.now()}`,
              type: 'paragraph',
              data: {
                text: `Hemos explorado los conceptos fundamentales de ${title.toLowerCase()}. Estos conocimientos te permitir√°n aplicar estas estructuras de manera efectiva en tus proyectos de programaci√≥n.`,
              },
            };
            structuredBlocks.push(conclusionBlock, summaryBlock);
          }
        }

        return structuredBlocks;
      }

      // Funci√≥n para generar t√≠tulos descriptivos de lecciones
      function generateDescriptiveLessonTitle(
        blocks: any[],
        moduleTitle: string,
        lessonNumber: number
      ) {
        // T√≠tulos espec√≠ficos para cada lecci√≥n
        const lessonTitles = [
          '¬øPara qu√© es necesario?',
          'Fundamentos',
          'Estructuras b√°sicas',
          'Casos de uso y ejemplos',
          'Conclusi√≥n',
        ];

        return lessonTitles[lessonNumber - 1] || `Lecci√≥n ${lessonNumber}`;
      }

      // Funci√≥n para generar contenido completo de lecci√≥n cuando est√° vac√≠a
      function generateCompleteLessonContent(
        title: string,
        moduleTitle: string = ''
      ) {
        const timestamp = Date.now();

        // Contenido espec√≠fico seg√∫n el tipo de lecci√≥n
        let blocks: any[] = [];

        if (title === '¬øPara qu√© es necesario?') {
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: title },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `En esta lecci√≥n entenderemos por qu√© ${moduleTitle.toLowerCase()} es fundamental en programaci√≥n y cu√°les son sus ventajas principales.`,
              },
            },
            {
              id: `importance_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Importancia en el desarrollo' },
            },
            {
              id: `benefits_${timestamp}`,
              type: 'list',
              data: {
                style: 'bulleted',
                items: [
                  'Mejora la eficiencia del c√≥digo',
                  'Facilita el mantenimiento',
                  'Optimiza el uso de memoria',
                  'Permite escalabilidad',
                ],
              },
            },
            {
              id: `use_cases_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Casos de aplicaci√≥n' },
            },
            {
              id: `use_cases_list_${timestamp}`,
              type: 'list',
              data: {
                style: 'numbered',
                items: [
                  'Desarrollo de aplicaciones web',
                  'An√°lisis de datos',
                  'Algoritmos de b√∫squeda',
                  'Sistemas de recomendaci√≥n',
                ],
              },
            },
          ];
        } else if (title === 'Fundamentos') {
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: title },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Exploraremos los conceptos te√≥ricos fundamentales de ${moduleTitle.toLowerCase()} y sus principios b√°sicos.`,
              },
            },
            {
              id: `theory_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Conceptos te√≥ricos' },
            },
            {
              id: `theory_paragraph_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Los fundamentos de ${moduleTitle.toLowerCase()} se basan en principios matem√°ticos y computacionales que permiten organizar y manipular datos de manera eficiente.`,
              },
            },
            {
              id: `principles_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Principios clave' },
            },
            {
              id: `principles_list_${timestamp}`,
              type: 'list',
              data: {
                style: 'bulleted',
                items: [
                  'Organizaci√≥n l√≥gica de datos',
                  'Operaciones de acceso eficiente',
                  'Gesti√≥n de memoria optimizada',
                  'Algoritmos de manipulaci√≥n',
                ],
              },
            },
          ];
        } else if (title === 'Estructuras b√°sicas') {
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: title },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Aprenderemos las estructuras b√°sicas de ${moduleTitle.toLowerCase()} y c√≥mo implementarlas en Python.`,
              },
            },
            {
              id: `implementation_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Implementaci√≥n b√°sica' },
            },
            {
              id: `code_${timestamp}`,
              type: 'code',
              data: {
                language: 'python',
                snippet: `# Estructura b√°sica de ${moduleTitle.toLowerCase()}\nclass EstructuraBasica:\n    def __init__(self):\n        self.datos = []\n    \n    def agregar(self, elemento):\n        self.datos.append(elemento)\n    \n    def obtener(self, indice):\n        return self.datos[indice]`,
              },
            },
            {
              id: `operations_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Operaciones principales' },
            },
            {
              id: `operations_list_${timestamp}`,
              type: 'list',
              data: {
                style: 'bulleted',
                items: [
                  'Crear estructura',
                  'Agregar elementos',
                  'Eliminar elementos',
                  'Buscar elementos',
                  'Modificar elementos',
                ],
              },
            },
          ];
        } else if (title === 'Casos de uso y ejemplos') {
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: title },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Veremos ejemplos pr√°cticos de ${moduleTitle.toLowerCase()} en situaciones reales de programaci√≥n.`,
              },
            },
            {
              id: `example1_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Ejemplo 1: Aplicaci√≥n b√°sica' },
            },
            {
              id: `code1_${timestamp}`,
              type: 'code',
              data: {
                language: 'python',
                snippet: `# Ejemplo pr√°ctico de ${moduleTitle.toLowerCase()}\ndef procesar_datos(datos):\n    resultado = []\n    for item in datos:\n        if item > 0:\n            resultado.append(item * 2)\n    return resultado\n\n# Uso\ndatos = [1, 2, 3, 4, 5]\nresultado = procesar_datos(datos)\nprint(resultado)  # [2, 4, 6, 8, 10]`,
              },
            },
            {
              id: `example2_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Ejemplo 2: Caso avanzado' },
            },
            {
              id: `code2_${timestamp}`,
              type: 'code',
              data: {
                language: 'python',
                snippet: `# Caso de uso avanzado\nclass GestorDatos:\n    def __init__(self):\n        self.estructura = {}\n    \n    def agregar_usuario(self, id, datos):\n        self.estructura[id] = datos\n    \n    def buscar_usuario(self, id):\n        return self.estructura.get(id, None)\n\n# Implementaci√≥n\ngestor = GestorDatos()\ngestor.agregar_usuario(1, {'nombre': 'Juan', 'edad': 25})\nusuario = gestor.buscar_usuario(1)\nprint(usuario)`,
              },
            },
          ];
        } else if (title === 'Conclusi√≥n') {
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: title },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Hemos completado el estudio de ${moduleTitle.toLowerCase()}. Resumamos los puntos clave aprendidos.`,
              },
            },
            {
              id: `summary_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Resumen de conceptos' },
            },
            {
              id: `summary_list_${timestamp}`,
              type: 'list',
              data: {
                style: 'bulleted',
                items: [
                  'Entendimos la importancia de la estructura',
                  'Aprendimos los fundamentos te√≥ricos',
                  'Implementamos estructuras b√°sicas',
                  'Vimos casos de uso pr√°cticos',
                ],
              },
            },
            {
              id: `next_steps_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Pr√≥ximos pasos' },
            },
            {
              id: `next_steps_paragraph_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Ahora puedes aplicar estos conceptos en tus propios proyectos. Te recomendamos practicar con ejercicios adicionales y explorar variaciones m√°s avanzadas de estas estructuras.`,
              },
            },
          ];
        } else {
          // Fallback gen√©rico
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: title },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `En esta lecci√≥n exploraremos ${title.toLowerCase()}. Aprenderemos los conceptos fundamentales y veremos ejemplos pr√°cticos.`,
              },
            },
          ];
        }

        return blocks;
      }

      // Funci√≥n para generar contenido de m√≥dulo usando IA
      async function generateModuleContentWithAI(
        moduleTitle: string,
        courseTopic: string,
        level: string
      ) {
        try {
          console.log(`ü§ñ Generating AI content for module: ${moduleTitle}`);

          const systemPrompt =
            ContractPromptBuilder.buildSystemPrompt('module');
          const userPrompt = ContractPromptBuilder.buildUserPrompt('module', {
            topic: `${courseTopic} - ${moduleTitle}`,
            level: level as 'beginner' | 'intermediate' | 'advanced',
            interests: [],
          });

          const aiResponse = await generateCourseMetadata(
            userPrompt,
            level,
            []
          );

          // Parsear y normalizar la respuesta
          let doc;
          try {
            doc = JSON.parse(aiResponse);
          } catch (parseError) {
            console.error('‚ùå JSON parse error:', parseError);
            // Intentar extraer JSON del markdown
            const jsonMatch =
              aiResponse.match(/```json\s*([\s\S]*?)\s*```/) ||
              aiResponse.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
              doc = JSON.parse(jsonMatch[1] || jsonMatch[0]);
            } else {
              throw new Error('No valid JSON found in AI response');
            }
          }

          // Normalizar y validar
          const normalizedDoc = normalizeToContract(doc);
          const validationResult =
            ContentContractValidator.validateDocument(normalizedDoc);

          if (!validationResult.isValid) {
            console.error(
              '‚ùå Content validation failed:',
              validationResult.errors
            );
            throw new Error(
              `Invalid ContentDocument: ${validationResult.errors.join(', ')}`
            );
          }

          return {
            blocks: normalizedDoc.blocks,
            description:
              (
                normalizedDoc.blocks.find((b: any) => b.type === 'paragraph')
                  ?.data as any
              )?.text?.slice(0, 300) || `M√≥dulo sobre ${moduleTitle}`,
          };
        } catch (error) {
          console.error(
            `‚ùå Error generating AI content for module ${moduleTitle}:`,
            error
          );
          // Fallback: generar contenido b√°sico
          return {
            blocks: [
              {
                id: `intro_${Date.now()}`,
                type: 'heading',
                data: { level: 1, text: moduleTitle },
              },
              {
                id: `content_${Date.now()}`,
                type: 'paragraph',
                data: {
                  text: `En este m√≥dulo aprender√°s sobre ${moduleTitle.toLowerCase()}. Este contenido se est√° generando autom√°ticamente.`,
                },
              },
            ],
            description: `M√≥dulo sobre ${moduleTitle}`,
          };
        }
      }

      // Funci√≥n para generar m√≥dulos restantes en background
      async function generateRemainingModules(
        courseId: number,
        moduleTitles: string[],
        courseTopic: string,
        level: string
      ) {
        console.log(
          'üöÄ Starting background generation for remaining modules...'
        );

        for (let i = 0; i < moduleTitles.length; i++) {
          const moduleTitle = moduleTitles[i];
          const moduleNumber = i + 2; // M√≥dulos 2-5

          try {
            console.log(`üìö Generating Module ${moduleNumber}: ${moduleTitle}`);

            // Generar contenido espec√≠fico para este m√≥dulo usando la IA
            const moduleContent = await generateModuleContent(
              moduleTitle,
              courseTopic,
              level
            );

            // Verificar si el m√≥dulo ya existe, si no, crearlo
            let module = await db.module.findFirst({
              where: {
                courseId: courseId as any,
                moduleOrder: moduleNumber,
              },
            });

            if (!module) {
              // Crear el m√≥dulo en la base de datos
              module = await db.module.create({
                data: {
                  courseId: courseId as any,
                  moduleOrder: moduleNumber,
                  title: moduleTitle,
                  description: moduleContent.description,
                },
              });
            } else {
              // Actualizar el m√≥dulo existente
              module = await db.module.update({
                where: { id: module.id },
                data: {
                  title: moduleTitle,
                  description: moduleContent.description,
                },
              });
            }

            // Generar contenido espec√≠fico para este m√≥dulo usando la IA
            const aiModuleContent = await generateModuleContentWithAI(
              moduleTitle,
              courseTopic,
              level
            );

            // Generar lecciones completas e individuales para el m√≥dulo
            const moduleResult = await generateCompleteLessonsForModule(
              moduleTitle,
              courseTopic,
              level
            );
            const moduleLessons = moduleResult.lessons;
            const quizQuestions = moduleResult.quizQuestions;

            // Crear las lecciones del m√≥dulo (din√°micas, no fijas)
            for (let j = 0; j < moduleLessons.length; j++) {
              const lesson = moduleLessons[j];
              const lessonNumber = j + 1;

              const miniDoc = {
                version: '1.0',
                locale: 'es',
                content_id: `module_${moduleNumber}_lesson_${lessonNumber}`,
                meta: {
                  topic: lesson.title,
                  audience: 'Estudiantes',
                  level: level as 'beginner' | 'intermediate' | 'advanced',
                  created_at: new Date().toISOString().split('T')[0],
                },
                blocks: lesson.blocks,
              };

              // Verificar si el chunk ya existe
              const existingChunk = await db.chunk.findFirst({
                where: {
                  moduleId: module.id,
                  chunkOrder: j + 1,
                },
              });

              if (!existingChunk) {
                await db.chunk.create({
                  data: {
                    moduleId: module.id,
                    chunkOrder: j + 1,
                    title: lesson.title,
                    content: JSON.stringify(miniDoc),
                    videoData: lesson.videoData || null,
                  },
                });
              } else {
                // Actualizar el chunk existente
                await db.chunk.update({
                  where: { id: existingChunk.id },
                  data: {
                    title: lesson.title,
                    content: JSON.stringify(miniDoc),
                  },
                });
              }
            }

            // Crear o actualizar quiz del m√≥dulo
            let quiz = await db.quiz.findFirst({
              where: {
                moduleId: module.id,
                quizOrder: 1,
              },
            });

            if (!quiz) {
              quiz = await db.quiz.create({
                data: {
                  moduleId: module.id,
                  quizOrder: 1,
                  title: `Quiz: ${moduleTitle}`,
                },
              });
            } else {
              quiz = await db.quiz.update({
                where: { id: quiz.id },
                data: {
                  title: `Quiz: ${moduleTitle}`,
                },
              });
            }

            // Crear las 5 preguntas del quiz
            if (quizQuestions && quizQuestions.length > 0) {
              // Eliminar preguntas existentes
              await db.quizQuestion.deleteMany({
                where: { quizId: quiz.id },
              });

              // Crear las nuevas preguntas
              for (let q = 0; q < quizQuestions.length; q++) {
                const question = quizQuestions[q];
                await db.quizQuestion.create({
                  data: {
                    quizId: quiz.id,
                    questionOrder: q + 1,
                    question: question.question,
                    options: JSON.stringify(question.options),
                    correctAnswer: question.correctAnswer,
                    explanation: question.explanation,
                  },
                });
              }
              console.log(
                `‚úÖ Created ${quizQuestions.length} quiz questions for module ${moduleNumber}`
              );
            } else {
              // Fallback: crear una pregunta b√°sica
              const existingQuestion = await db.quizQuestion.findFirst({
                where: {
                  quizId: quiz.id,
                  questionOrder: 1,
                },
              });

              if (!existingQuestion) {
                await db.quizQuestion.create({
                  data: {
                    quizId: quiz.id,
                    questionOrder: 1,
                    question: `¬øCu√°l es el concepto principal de ${moduleTitle}?`,
                    options: JSON.stringify([
                      'Concepto clave',
                      'Detalle menor',
                      'Dato aislado',
                      'Ejemplo aleatorio',
                    ]),
                    correctAnswer: 0,
                    explanation:
                      'Refuerza el concepto clave para consolidar el aprendizaje.',
                  },
                });
              }
            }

            console.log(`‚úÖ Module ${moduleNumber} completed successfully`);

            // Peque√±a pausa entre m√≥dulos para no sobrecargar
            await new Promise(resolve => setTimeout(resolve, 1000));
          } catch (error) {
            console.error(`‚ùå Error generating Module ${moduleNumber}:`, error);
          }
        }

        console.log('üéâ All remaining modules generated successfully!');
      }

      // Funci√≥n para generar contenido espec√≠fico de un m√≥dulo
      async function generateModuleContent(
        moduleTitle: string,
        courseTopic: string,
        level: string
      ) {
        // Por ahora, generar contenido sint√©tico. En el futuro se puede integrar con IA
        return {
          description: `M√≥dulo sobre ${moduleTitle.toLowerCase()}. Aprender√°s los conceptos fundamentales y ver√°s ejemplos pr√°cticos de implementaci√≥n.`,
        };
      }

      // Funci√≥n para generar contenido espec√≠fico seg√∫n el m√≥dulo
      function generateModuleSpecificContent(
        lessonTitle: string,
        moduleTitle: string,
        moduleNumber: number
      ) {
        const timestamp = Date.now();

        // Extraer el tema principal del t√≠tulo del m√≥dulo
        const mainTopic = moduleTitle.split(':')[0].trim().toLowerCase();

        let blocks: any[] = [];

        if (lessonTitle === '¬øPara qu√© es necesario?') {
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: lessonTitle },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `En esta lecci√≥n entenderemos por qu√© ${mainTopic} es fundamental en programaci√≥n y cu√°les son sus ventajas principales. Comenzaremos explorando el contexto hist√≥rico y la evoluci√≥n de este concepto en el desarrollo de software moderno.`,
              },
            },
            {
              id: `context_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `El desarrollo de software ha evolucionado significativamente, y ${mainTopic} se ha convertido en una herramienta esencial para crear aplicaciones robustas, escalables y mantenibles. Su importancia radica en la capacidad de resolver problemas complejos de manera eficiente y elegante.`,
              },
            },
            {
              id: `importance_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Importancia en el desarrollo moderno' },
            },
            {
              id: `benefits_${timestamp}`,
              type: 'list',
              data: {
                style: 'bulleted',
                items: getModuleSpecificBenefits(mainTopic),
              },
            },
            {
              id: `real_world_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Aplicaciones en el mundo real' },
            },
            {
              id: `real_world_paragraph_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Las aplicaciones de ${mainTopic} se extienden m√°s all√° del c√≥digo. Empresas como Google, Facebook, Amazon y Netflix utilizan estos conceptos para manejar millones de usuarios y procesar cantidades masivas de datos en tiempo real.`,
              },
            },
            {
              id: `use_cases_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Casos de aplicaci√≥n espec√≠ficos' },
            },
            {
              id: `use_cases_list_${timestamp}`,
              type: 'list',
              data: {
                style: 'numbered',
                items: getModuleSpecificUseCases(mainTopic),
              },
            },
            {
              id: `callout_${timestamp}`,
              type: 'callout',
              data: {
                kind: 'tip',
                text: `Recuerda que dominar ${mainTopic} no solo mejora tu c√≥digo, sino que tambi√©n te prepara para trabajar en proyectos de gran escala y equipos de desarrollo profesionales.`,
              },
            },
            {
              id: `conclusion_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `En resumen, ${mainTopic} es fundamental porque proporciona las herramientas necesarias para crear software de calidad profesional. Su dominio te permitir√° abordar problemas complejos con confianza y eficiencia.`,
              },
            },
          ];
        } else if (lessonTitle === 'Fundamentos') {
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: lessonTitle },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Exploraremos los conceptos te√≥ricos fundamentales de ${mainTopic} y sus principios b√°sicos. Esta lecci√≥n sienta las bases conceptuales necesarias para comprender completamente c√≥mo funciona ${mainTopic} y por qu√© es tan importante en el desarrollo de software.`,
              },
            },
            {
              id: `theory_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Conceptos te√≥ricos fundamentales' },
            },
            {
              id: `theory_paragraph_${timestamp}`,
              type: 'paragraph',
              data: { text: getModuleSpecificTheory(mainTopic) },
            },
            {
              id: `deep_concept_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Para entender completamente ${mainTopic}, es crucial comprender su arquitectura interna y c√≥mo interact√∫a con otros componentes del sistema. Esta comprensi√≥n profunda te permitir√° tomar decisiones informadas y optimizar el rendimiento de tus aplicaciones.`,
              },
            },
            {
              id: `principles_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Principios clave y mejores pr√°cticas' },
            },
            {
              id: `principles_list_${timestamp}`,
              type: 'list',
              data: {
                style: 'bulleted',
                items: getModuleSpecificPrinciples(mainTopic),
              },
            },
            {
              id: `implementation_details_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Detalles de implementaci√≥n' },
            },
            {
              id: `implementation_paragraph_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `La implementaci√≥n correcta de ${mainTopic} requiere atenci√≥n a los detalles. Cada decisi√≥n de dise√±o tiene implicaciones en el rendimiento, la mantenibilidad y la escalabilidad de tu c√≥digo.`,
              },
            },
            {
              id: `warning_${timestamp}`,
              type: 'callout',
              data: {
                kind: 'warning',
                text: `Es importante no saltarse los fundamentos. Una comprensi√≥n s√≥lida de estos conceptos b√°sicos es esencial para evitar errores comunes y construir c√≥digo robusto.`,
              },
            },
            {
              id: `conclusion_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Los fundamentos de ${mainTopic} son la base sobre la cual construir√°s aplicaciones m√°s complejas. Dominar estos conceptos te dar√° la confianza necesaria para enfrentar desaf√≠os m√°s avanzados.`,
              },
            },
          ];
        } else if (lessonTitle === 'Estructuras b√°sicas') {
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: lessonTitle },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Aprenderemos las estructuras b√°sicas de ${mainTopic} y c√≥mo implementarlas en Python.`,
              },
            },
            {
              id: `implementation_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Implementaci√≥n b√°sica' },
            },
            {
              id: `code_${timestamp}`,
              type: 'code',
              data: {
                language: 'python',
                snippet: getModuleSpecificCode(mainTopic),
              },
            },
            {
              id: `operations_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Operaciones principales' },
            },
            {
              id: `operations_list_${timestamp}`,
              type: 'list',
              data: {
                style: 'bulleted',
                items: getModuleSpecificOperations(mainTopic),
              },
            },
          ];
        } else if (lessonTitle === 'Casos de uso y ejemplos') {
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: lessonTitle },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Veremos ejemplos pr√°cticos de ${mainTopic} en situaciones reales de programaci√≥n.`,
              },
            },
            {
              id: `example1_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Ejemplo 1: Aplicaci√≥n b√°sica' },
            },
            {
              id: `code1_${timestamp}`,
              type: 'code',
              data: {
                language: 'python',
                snippet: getModuleSpecificExample1(mainTopic),
              },
            },
            {
              id: `example2_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Ejemplo 2: Caso avanzado' },
            },
            {
              id: `code2_${timestamp}`,
              type: 'code',
              data: {
                language: 'python',
                snippet: getModuleSpecificExample2(mainTopic),
              },
            },
          ];
        } else if (lessonTitle === 'Conclusi√≥n') {
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: lessonTitle },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `Hemos completado el estudio de ${mainTopic}. Resumamos los puntos clave aprendidos.`,
              },
            },
            {
              id: `summary_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Resumen de conceptos' },
            },
            {
              id: `summary_list_${timestamp}`,
              type: 'list',
              data: {
                style: 'bulleted',
                items: getModuleSpecificSummary(mainTopic),
              },
            },
            {
              id: `next_steps_${timestamp}`,
              type: 'heading',
              data: { level: 2, text: 'Pr√≥ximos pasos' },
            },
            {
              id: `next_steps_paragraph_${timestamp}`,
              type: 'paragraph',
              data: { text: getModuleSpecificNextSteps(mainTopic) },
            },
          ];
        } else {
          // Fallback gen√©rico
          blocks = [
            {
              id: `heading_${timestamp}`,
              type: 'heading',
              data: { level: 1, text: lessonTitle },
            },
            {
              id: `intro_${timestamp}`,
              type: 'paragraph',
              data: {
                text: `En esta lecci√≥n exploraremos ${lessonTitle.toLowerCase()}. Aprenderemos los conceptos fundamentales y veremos ejemplos pr√°cticos.`,
              },
            },
          ];
        }

        return blocks;
      }

      // Funciones auxiliares para generar contenido espec√≠fico por m√≥dulo
      function getModuleSpecificBenefits(topic: string): string[] {
        const benefitsMap: { [key: string]: string[] } = {
          listas: [
            'Permite almacenar m√∫ltiples elementos de diferentes tipos',
            'Facilita la manipulaci√≥n din√°mica de datos',
            'Optimiza el acceso secuencial a elementos',
            'Permite operaciones de inserci√≥n y eliminaci√≥n eficientes',
          ],
          tuplas: [
            'Garantiza inmutabilidad de los datos',
            'Mejora el rendimiento en operaciones de lectura',
            'Facilita el uso como claves en diccionarios',
            'Reduce el uso de memoria comparado con listas',
          ],
          diccionarios: [
            'Permite acceso r√°pido por clave en tiempo constante',
            'Facilita la organizaci√≥n de datos estructurados',
            'Optimiza las b√∫squedas y actualizaciones',
            'Permite mapeo eficiente entre claves y valores',
          ],
          conjuntos: [
            'Garantiza elementos √∫nicos autom√°ticamente',
            'Optimiza operaciones de uni√≥n e intersecci√≥n',
            'Facilita la eliminaci√≥n de duplicados',
            'Mejora el rendimiento en b√∫squedas de pertenencia',
          ],
          'tema 4': [
            'Proporciona estructuras de datos avanzadas',
            'Facilita la resoluci√≥n de problemas complejos',
            'Optimiza el rendimiento en algoritmos espec√≠ficos',
            'Permite implementaciones m√°s eficientes',
          ],
        };
        return (
          benefitsMap[topic] || [
            'Mejora la eficiencia del c√≥digo',
            'Facilita el mantenimiento',
            'Optimiza el uso de memoria',
            'Permite escalabilidad',
          ]
        );
      }

      function getModuleSpecificUseCases(topic: string): string[] {
        const useCasesMap: { [key: string]: string[] } = {
          listas: [
            'Almacenamiento de datos din√°micos',
            'Implementaci√≥n de pilas y colas',
            'Procesamiento de secuencias de datos',
            'Algoritmos de ordenamiento',
          ],
          tuplas: [
            'Coordenadas geogr√°ficas (lat, lng)',
            'Configuraciones inmutables',
            'Claves compuestas en diccionarios',
            'Retorno de m√∫ltiples valores de funciones',
          ],
          diccionarios: [
            'Bases de datos en memoria',
            'Cach√© de resultados computados',
            'Mapeo de configuraciones',
            '√çndices de b√∫squeda r√°pida',
          ],
          conjuntos: [
            'Eliminaci√≥n de duplicados',
            'Operaciones de conjuntos matem√°ticos',
            'Filtrado de elementos √∫nicos',
            'Verificaci√≥n de pertenencia',
          ],
          'tema 4': [
            'Estructuras de datos personalizadas',
            'Algoritmos de optimizaci√≥n',
            'Sistemas de gesti√≥n de datos',
            'Implementaciones de alto rendimiento',
          ],
        };
        return (
          useCasesMap[topic] || [
            'Desarrollo de aplicaciones web',
            'An√°lisis de datos',
            'Algoritmos de b√∫squeda',
            'Sistemas de recomendaci√≥n',
          ]
        );
      }

      function getModuleSpecificTheory(topic: string): string {
        const theoryMap: { [key: string]: string } = {
          listas:
            'Las listas en Python son estructuras de datos din√°micas que permiten almacenar elementos de diferentes tipos en una secuencia ordenada. Se implementan como arrays din√°micos que pueden crecer o reducirse seg√∫n sea necesario.',
          tuplas:
            'Las tuplas son estructuras de datos inmutables que almacenan una secuencia ordenada de elementos. Una vez creadas, no pueden modificarse, lo que las hace ideales para datos que no cambiar√°n durante la ejecuci√≥n del programa.',
          diccionarios:
            'Los diccionarios implementan el concepto de tabla hash, permitiendo almacenar pares clave-valor con acceso en tiempo constante O(1). Utilizan funciones hash para mapear claves a posiciones en memoria.',
          conjuntos:
            'Los conjuntos implementan la teor√≠a matem√°tica de conjuntos, almacenando elementos √∫nicos sin orden espec√≠fico. Utilizan tablas hash internamente para garantizar unicidad y operaciones eficientes.',
          'tema 4':
            'Este m√≥dulo explora estructuras de datos avanzadas que combinan m√∫ltiples conceptos para resolver problemas complejos de manera eficiente.',
        };
        return (
          theoryMap[topic] ||
          `Los fundamentos de ${topic} se basan en principios matem√°ticos y computacionales que permiten organizar y manipular datos de manera eficiente.`
        );
      }

      function getModuleSpecificPrinciples(topic: string): string[] {
        const principlesMap: { [key: string]: string[] } = {
          listas: [
            'Acceso secuencial a elementos',
            'Inserci√≥n y eliminaci√≥n din√°micas',
            'Almacenamiento contiguo en memoria',
            'Operaciones de indexaci√≥n eficientes',
          ],
          tuplas: [
            'Inmutabilidad garantizada',
            'Acceso por √≠ndice',
            'Uso eficiente de memoria',
            'Habilidad para ser claves de diccionario',
          ],
          diccionarios: [
            'Acceso por clave en tiempo constante',
            'Almacenamiento de pares clave-valor',
            'Eliminaci√≥n de claves duplicadas',
            'Iteraci√≥n eficiente sobre elementos',
          ],
          conjuntos: [
            'Elementos √∫nicos autom√°ticamente',
            'Operaciones de conjuntos matem√°ticos',
            'B√∫squeda de pertenencia eficiente',
            'Eliminaci√≥n autom√°tica de duplicados',
          ],
          'tema 4': [
            'Combinaci√≥n de m√∫ltiples estructuras',
            'Optimizaci√≥n para casos espec√≠ficos',
            'Balance entre memoria y rendimiento',
            'Implementaciones personalizadas',
          ],
        };
        return (
          principlesMap[topic] || [
            'Organizaci√≥n l√≥gica de datos',
            'Operaciones de acceso eficiente',
            'Gesti√≥n de memoria optimizada',
            'Algoritmos de manipulaci√≥n',
          ]
        );
      }

      function getModuleSpecificCode(topic: string): string {
        const codeMap: { [key: string]: string } = {
          listas: `# Estructura b√°sica de listas
mi_lista = [1, 2, 3, 4, 5]

# Agregar elementos
mi_lista.append(6)
mi_lista.insert(0, 0)

# Acceder a elementos
primer_elemento = mi_lista[0]
ultimo_elemento = mi_lista[-1]

# Iterar sobre la lista
for elemento in mi_lista:
    print(elemento)`,
          tuplas: `# Estructura b√°sica de tuplas
mi_tupla = (1, 2, 3, 4, 5)

# Acceder a elementos
primer_elemento = mi_tupla[0]
ultimo_elemento = mi_tupla[-1]

# Desempaquetar tupla
a, b, c, d, e = mi_tupla

# Tupla como clave de diccionario
coordenadas = {(0, 0): 'origen', (1, 1): 'esquina'}`,
          diccionarios: `# Estructura b√°sica de diccionarios
mi_diccionario = {'nombre': 'Juan', 'edad': 25, 'ciudad': 'Madrid'}

# Agregar/modificar elementos
mi_diccionario['profesion'] = 'Programador'
mi_diccionario['edad'] = 26

# Acceder a valores
nombre = mi_diccionario['nombre']
edad = mi_diccionario.get('edad', 0)

# Iterar sobre el diccionario
for clave, valor in mi_diccionario.items():
    print(f'{clave}: {valor}')`,
          conjuntos: `# Estructura b√°sica de conjuntos
mi_conjunto = {1, 2, 3, 4, 5}

# Agregar elementos
mi_conjunto.add(6)
mi_conjunto.update([7, 8, 9])

# Operaciones de conjuntos
otro_conjunto = {4, 5, 6, 7, 8}
union = mi_conjunto | otro_conjunto
interseccion = mi_conjunto & otro_conjunto

# Verificar pertenencia
if 3 in mi_conjunto:
    print('3 est√° en el conjunto')`,
          'tema 4': `# Estructura b√°sica avanzada
class EstructuraAvanzada:
    def __init__(self):
        self.datos = {}
        self.contador = 0
    
    def agregar(self, clave, valor):
        self.datos[clave] = valor
        self.contador += 1
    
    def obtener(self, clave):
        return self.datos.get(clave, None)
    
    def eliminar(self, clave):
        if clave in self.datos:
            del self.datos[clave]
            self.contador -= 1`,
        };
        return (
          codeMap[topic] ||
          `# Estructura b√°sica de ${topic}
class EstructuraBasica:
    def __init__(self):
        self.datos = []
    
    def agregar(self, elemento):
        self.datos.append(elemento)
    
    def obtener(self, indice):
        return self.datos[indice]`
        );
      }

      function getModuleSpecificOperations(topic: string): string[] {
        const operationsMap: { [key: string]: string[] } = {
          listas: [
            'append() - Agregar al final',
            'insert() - Insertar en posici√≥n espec√≠fica',
            'remove() - Eliminar elemento',
            'pop() - Eliminar y retornar elemento',
            'index() - Encontrar posici√≥n de elemento',
          ],
          tuplas: [
            'Acceso por √≠ndice',
            'Desempaquetado de valores',
            'Concatenaci√≥n con +',
            'Repetici√≥n con *',
            'Verificaci√≥n de pertenencia con in',
          ],
          diccionarios: [
            'get() - Obtener valor por clave',
            'update() - Actualizar m√∫ltiples pares',
            'pop() - Eliminar y retornar valor',
            'keys() - Obtener todas las claves',
            'values() - Obtener todos los valores',
          ],
          conjuntos: [
            'add() - Agregar elemento √∫nico',
            'remove() - Eliminar elemento',
            'union() - Uni√≥n de conjuntos',
            'intersection() - Intersecci√≥n',
            'difference() - Diferencia entre conjuntos',
          ],
          'tema 4': [
            'Operaciones personalizadas',
            'M√©todos de optimizaci√≥n',
            'Algoritmos espec√≠ficos',
            'Validaciones avanzadas',
            'Integraci√≥n con otras estructuras',
          ],
        };
        return (
          operationsMap[topic] || [
            'Crear estructura',
            'Agregar elementos',
            'Eliminar elementos',
            'Buscar elementos',
            'Modificar elementos',
          ]
        );
      }

      function getModuleSpecificExample1(topic: string): string {
        const example1Map: { [key: string]: string } = {
          listas: `# Ejemplo: Lista de compras
compras = ['pan', 'leche', 'huevos']
print(f'Lista inicial: {compras}')

# Agregar m√°s items
compras.append('queso')
compras.insert(1, 'mantequilla')
print(f'Despu√©s de agregar: {compras}')

# Mostrar cada item
for i, item in enumerate(compras, 1):
    print(f'{i}. {item}')`,
          tuplas: `# Ejemplo: Coordenadas GPS
ubicacion = (40.4168, -3.7038)  # Madrid
print(f'Coordenadas: {ubicacion}')

# Desempaquetar
latitud, longitud = ubicacion
print(f'Latitud: {latitud}, Longitud: {longitud}')

# Usar como clave en diccionario
ciudades = {ubicacion: 'Madrid', (41.9028, 12.4964): 'Roma'}
print(f'Ciudad en {ubicacion}: {ciudades[ubicacion]}')`,
          diccionarios: `# Ejemplo: Base de datos de estudiantes
estudiantes = {
    '001': {'nombre': 'Ana', 'edad': 20, 'curso': 'Python'},
    '002': {'nombre': 'Luis', 'edad': 22, 'curso': 'Java'}
}

# Agregar nuevo estudiante
estudiantes['003'] = {'nombre': 'Mar√≠a', 'edad': 21, 'curso': 'Python'}

# Buscar estudiante
id_buscado = '002'
if id_buscado in estudiantes:
    estudiante = estudiantes[id_buscado]
    print(f'Estudiante encontrado: {estudiante["nombre"]}')`,
          conjuntos: `# Ejemplo: Eliminar duplicados de una lista
numeros = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
print(f'Lista con duplicados: {numeros}')

# Convertir a conjunto para eliminar duplicados
numeros_unicos = set(numeros)
print(f'N√∫meros √∫nicos: {sorted(numeros_unicos)}')

# Operaciones de conjuntos
pares = {2, 4, 6, 8, 10}
impares = {1, 3, 5, 7, 9}
todos = pares | impares
print(f'Todos los n√∫meros: {sorted(todos)}')`,
          'tema 4': `# Ejemplo: Estructura de datos personalizada
class ColaPrioridad:
    def __init__(self):
        self.elementos = []
    
    def encolar(self, item, prioridad):
        self.elementos.append((prioridad, item))
        self.elementos.sort(reverse=True)
    
    def desencolar(self):
        if self.elementos:
            return self.elementos.pop(0)[1]
        return None

# Uso
cola = ColaPrioridad()
cola.encolar('tarea_urgente', 3)
cola.encolar('tarea_normal', 1)
print(f'Siguiente tarea: {cola.desencolar()}')`,
        };
        return (
          example1Map[topic] ||
          `# Ejemplo pr√°ctico de ${topic}
def procesar_datos(datos):
    resultado = []
    for item in datos:
        if item > 0:
            resultado.append(item * 2)
    return resultado

# Uso
datos = [1, 2, 3, 4, 5]
resultado = procesar_datos(datos)
print(resultado)  # [2, 4, 6, 8, 10]`
        );
      }

      function getModuleSpecificExample2(topic: string): string {
        const example2Map: { [key: string]: string } = {
          listas: `# Ejemplo avanzado: Sistema de inventario
class Inventario:
    def __init__(self):
        self.productos = []
    
    def agregar_producto(self, nombre, precio, stock):
        self.productos.append({
            'nombre': nombre,
            'precio': precio,
            'stock': stock
        })
    
    def buscar_producto(self, nombre):
        for producto in self.productos:
            if producto['nombre'] == nombre:
                return producto
        return None
    
    def actualizar_stock(self, nombre, nuevo_stock):
        producto = self.buscar_producto(nombre)
        if producto:
            producto['stock'] = nuevo_stock

# Uso
inventario = Inventario()
inventario.agregar_producto('Laptop', 999.99, 10)
inventario.agregar_producto('Mouse', 25.50, 50)
print(inventario.buscar_producto('Laptop'))`,
          tuplas: `# Ejemplo avanzado: Sistema de coordenadas 3D
class Punto3D:
    def __init__(self, x, y, z):
        self.coordenadas = (x, y, z)
    
    def distancia_origen(self):
        x, y, z = self.coordenadas
        return (x**2 + y**2 + z**2)**0.5
    
    def distancia_a(self, otro_punto):
        x1, y1, z1 = self.coordenadas
        x2, y2, z2 = otro_punto.coordenadas
        return ((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2)**0.5

# Uso
punto1 = Punto3D(1, 2, 3)
punto2 = Punto3D(4, 5, 6)
print(f'Distancia al origen: {punto1.distancia_origen():.2f}')
print(f'Distancia entre puntos: {punto1.distancia_a(punto2):.2f}')`,
          diccionarios: `# Ejemplo avanzado: Sistema de cach√©
class Cache:
    def __init__(self, max_size=100):
        self.cache = {}
        self.max_size = max_size
        self.access_order = []
    
    def get(self, key):
        if key in self.cache:
            # Mover al final (m√°s reciente)
            self.access_order.remove(key)
            self.access_order.append(key)
            return self.cache[key]
        return None
    
    def set(self, key, value):
        if len(self.cache) >= self.max_size:
            # Eliminar el menos reciente
            oldest = self.access_order.pop(0)
            del self.cache[oldest]
        
        self.cache[key] = value
        self.access_order.append(key)

# Uso
cache = Cache(max_size=3)
cache.set('user:1', {'nombre': 'Ana'})
cache.set('user:2', {'nombre': 'Luis'})
print(cache.get('user:1'))`,
          conjuntos: `# Ejemplo avanzado: Sistema de recomendaciones
class SistemaRecomendaciones:
    def __init__(self):
        self.usuarios_intereses = {}
        self.productos_categorias = {}
    
    def agregar_intereses_usuario(self, usuario, intereses):
        self.usuarios_intereses[usuario] = set(intereses)
    
    def agregar_categorias_producto(self, producto, categorias):
        self.productos_categorias[producto] = set(categorias)
    
    def recomendar_productos(self, usuario):
        if usuario not in self.usuarios_intereses:
            return []
        
        intereses_usuario = self.usuarios_intereses[usuario]
        recomendaciones = []
        
        for producto, categorias in self.productos_categorias.items():
            if intereses_usuario & categorias:  # Intersecci√≥n
                recomendaciones.append(producto)
        
        return recomendaciones

# Uso
sistema = SistemaRecomendaciones()
sistema.agregar_intereses_usuario('Ana', ['tecnologia', 'deportes'])
sistema.agregar_categorias_producto('iPhone', ['tecnologia', 'comunicacion'])
print(sistema.recomendar_productos('Ana'))`,
          'tema 4': `# Ejemplo avanzado: √Årbol binario de b√∫squeda
class Nodo:
    def __init__(self, valor):
        self.valor = valor
        self.izquierda = None
        self.derecha = None

class ArbolBinario:
    def __init__(self):
        self.raiz = None
    
    def insertar(self, valor):
        self.raiz = self._insertar_recursivo(self.raiz, valor)
    
    def _insertar_recursivo(self, nodo, valor):
        if nodo is None:
            return Nodo(valor)
        
        if valor < nodo.valor:
            nodo.izquierda = self._insertar_recursivo(nodo.izquierda, valor)
        else:
            nodo.derecha = self._insertar_recursivo(nodo.derecha, valor)
        
        return nodo
    
    def buscar(self, valor):
        return self._buscar_recursivo(self.raiz, valor)
    
    def _buscar_recursivo(self, nodo, valor):
        if nodo is None or nodo.valor == valor:
            return nodo
        if valor < nodo.valor:
            return self._buscar_recursivo(nodo.izquierda, valor)
        return self._buscar_recursivo(nodo.derecha, valor)

# Uso
arbol = ArbolBinario()
for valor in [5, 3, 7, 1, 9]:
    arbol.insertar(valor)
print(arbol.buscar(3) is not None)`,
        };
        return (
          example2Map[topic] ||
          `# Caso de uso avanzado
class GestorDatos:
    def __init__(self):
        self.estructura = {}
    
    def agregar_usuario(self, id, datos):
        self.estructura[id] = datos
    
    def buscar_usuario(self, id):
        return self.estructura.get(id, None)

# Implementaci√≥n
gestor = GestorDatos()
gestor.agregar_usuario(1, {'nombre': 'Juan', 'edad': 25})
usuario = gestor.buscar_usuario(1)
print(usuario)`
        );
      }

      function getModuleSpecificSummary(topic: string): string[] {
        const summaryMap: { [key: string]: string[] } = {
          listas: [
            'Entendimos la flexibilidad de las listas para almacenar datos din√°micos',
            'Aprendimos las operaciones b√°sicas de inserci√≥n, eliminaci√≥n y acceso',
            'Implementamos estructuras de datos lineales eficientes',
            'Vimos casos de uso pr√°cticos en sistemas reales',
          ],
          tuplas: [
            'Entendimos la importancia de la inmutabilidad en programaci√≥n',
            'Aprendimos a usar tuplas como claves en diccionarios',
            'Implementamos estructuras de datos fijas y eficientes',
            'Vimos aplicaciones en coordenadas y configuraciones',
          ],
          diccionarios: [
            'Entendimos el poder del acceso por clave en tiempo constante',
            'Aprendimos a organizar datos estructurados eficientemente',
            'Implementamos sistemas de cach√© y bases de datos simples',
            'Vimos aplicaciones en sistemas de recomendaciones',
          ],
          conjuntos: [
            'Entendimos la importancia de la unicidad en los datos',
            'Aprendimos operaciones matem√°ticas de conjuntos',
            'Implementamos sistemas de filtrado y eliminaci√≥n de duplicados',
            'Vimos aplicaciones en sistemas de recomendaciones avanzados',
          ],
          'tema 4': [
            'Entendimos la importancia de estructuras de datos personalizadas',
            'Aprendimos a combinar m√∫ltiples conceptos para resolver problemas',
            'Implementamos soluciones optimizadas para casos espec√≠ficos',
            'Vimos aplicaciones en sistemas de alto rendimiento',
          ],
        };
        return (
          summaryMap[topic] || [
            'Entendimos la importancia de la estructura',
            'Aprendimos los fundamentos te√≥ricos',
            'Implementamos estructuras b√°sicas',
            'Vimos casos de uso pr√°cticos',
          ]
        );
      }

      function getModuleSpecificNextSteps(topic: string): string {
        const nextStepsMap: { [key: string]: string } = {
          listas:
            'Ahora puedes explorar algoritmos de ordenamiento como quicksort y mergesort, implementar pilas y colas usando listas, y estudiar la complejidad temporal de las operaciones.',
          tuplas:
            'Te recomendamos estudiar namedtuples para estructuras de datos m√°s legibles, explorar el desempaquetado avanzado, y ver c√≥mo se usan en frameworks como Django.',
          diccionarios:
            'Puedes profundizar en defaultdict y Counter de collections, estudiar JSON y serializaci√≥n, y explorar bases de datos NoSQL que usan conceptos similares.',
          conjuntos:
            'Te sugerimos estudiar frozenset para conjuntos inmutables, explorar operaciones de conjuntos m√°s complejas, y ver aplicaciones en teor√≠a de grafos.',
          'tema 4':
            'Puedes explorar estructuras de datos m√°s avanzadas como √°rboles, grafos, y tablas hash personalizadas, y estudiar algoritmos de optimizaci√≥n.',
        };
        return (
          nextStepsMap[topic] ||
          `Ahora puedes aplicar estos conceptos en tus propios proyectos. Te recomendamos practicar con ejercicios adicionales y explorar variaciones m√°s avanzadas de estas estructuras.`
        );
      }

      console.log('üèóÔ∏è Creating modules...');

      // Crear los 5 m√≥dulos inmediatamente, pero solo con contenido en el m√≥dulo 1
      for (let i = 0; i < totalModules; i++) {
        try {
          console.log(`üìö Creating module ${i + 1}: ${moduleTitles[i]}`);

          const mod = orderedModules[i];
          const isFirstModule = i === 0;

          if (isFirstModule) {
            // M√≥dulo 1: Generar lecciones completas e individuales usando IA
            console.log(
              'üéØ Generating complete individual lessons for Module 1...'
            );

            // Generar 5 lecciones completas e individuales para el m√≥dulo 1
            const module1Result = await generateCompleteLessonsForModule(
              moduleTitles[i],
              doc.meta.topic,
              level
            );
            mod.lessons = module1Result.lessons;
            mod.quizQuestions = module1Result.quizQuestions;
          } else {
            // M√≥dulos 2-5: Crear con t√≠tulos pero sin contenido (se generar√° al iniciar curso)
            console.log(
              `üìù Creating module ${i + 1} with title only (content will be generated on course start)...`
            );
            mod.lessons = []; // Sin lecciones por ahora
          }

          const lessonBlocks = mod.lessons[0]?.blocks || [];
          const p = lessonBlocks.find((b: any) => b.type === 'paragraph');
          const desc = String((p as any)?.data?.text || firstParagraph).slice(
            0,
            300
          );

          console.log(
            `üíæ Creating module in database: ${moduleTitles[i] || `M√≥dulo ${i + 1}`}`
          );
          const module = await db.module.create({
            data: {
              courseId: course.id,
              moduleOrder: i + 1,
              title: moduleTitles[i] || `M√≥dulo ${i + 1}`,
              description: desc,
            },
          });
          console.log(`‚úÖ Module ${i + 1} created with ID: ${module.id}`);

          // Solo crear chunks para el m√≥dulo 1 (con contenido completo)
          if (isFirstModule) {
            console.log(
              `üìù Creating ${mod.lessons.length} chunks for module ${i + 1}...`
            );
            for (let j = 0; j < mod.lessons.length; j++) {
              try {
                const lesson = mod?.lessons?.[j];
                const lb = lesson?.blocks || [];
                const miniDoc = {
                  version: doc.version,
                  locale: doc.locale,
                  content_id: `${doc.content_id}_m${i + 1}_l${j + 1}`,
                  meta: {
                    ...doc.meta,
                    topic:
                      lesson?.title || `${moduleTitles[i]} - Lecci√≥n ${j + 1}`,
                  },
                  blocks: lb,
                };

                console.log(
                  `  üìÑ Creating chunk ${j + 1}: ${lesson?.title || `Lecci√≥n ${j + 1}`}`
                );
                await db.chunk.create({
                  data: {
                    moduleId: module.id,
                    chunkOrder: j + 1,
                    title: lesson?.title || `Lecci√≥n ${j + 1}`,
                    content: JSON.stringify(miniDoc),
                    videoData: lesson?.videoData || null,
                  },
                });
                console.log(`  ‚úÖ Chunk ${j + 1} created`);
              } catch (chunkError) {
                console.error(
                  `‚ùå Error creating chunk ${j + 1} for module ${i + 1}:`,
                  chunkError
                );
                throw chunkError;
              }
            }
          } else {
            console.log(
              `‚è≥ Skipping chunks for module ${i + 1} (will be generated on course start)`
            );
          }

          // Solo crear quiz para el m√≥dulo 1
          if (isFirstModule) {
            console.log(`‚ùì Creating quiz for module ${i + 1}...`);
            const quiz = await db.quiz.create({
              data: {
                moduleId: module.id,
                quizOrder: 1,
                title: `Quiz: ${moduleTitles[i]}`,
              },
            });

            // Crear las 5 preguntas del quiz
            if (mod.quizQuestions && mod.quizQuestions.length > 0) {
              for (let q = 0; q < mod.quizQuestions.length; q++) {
                const question = mod.quizQuestions[q];
                await db.quizQuestion.create({
                  data: {
                    quizId: quiz.id,
                    questionOrder: q + 1,
                    question: question.question,
                    options: JSON.stringify(question.options),
                    correctAnswer: question.correctAnswer,
                    explanation: question.explanation,
                  },
                });
              }
              console.log(
                `‚úÖ Created ${mod.quizQuestions.length} quiz questions for module ${i + 1}`
              );
            } else {
              // Fallback: crear una pregunta b√°sica
              await db.quizQuestion.create({
                data: {
                  quizId: quiz.id,
                  questionOrder: 1,
                  question:
                    'Autoevaluaci√≥n: ¬øCu√°l fue el concepto principal de esta lecci√≥n?',
                  options: JSON.stringify([
                    'Concepto clave',
                    'Detalle menor',
                    'Dato aislado',
                    'Ejemplo aleatorio',
                  ]),
                  correctAnswer: 0,
                  explanation:
                    'Refuerza el concepto clave para consolidar el aprendizaje.',
                },
              });
            }
            console.log(`‚úÖ Quiz for module ${i + 1} created`);
          } else {
            console.log(
              `‚è≥ Skipping quiz for module ${i + 1} (will be generated on course start)`
            );
          }

          console.log(`‚úÖ Module ${i + 1} completed successfully`);
        } catch (moduleError) {
          console.error(`‚ùå Error creating module ${i + 1}:`, moduleError);
          throw moduleError;
        }
      }

      console.log('üìù Updating course status to READY...');
      // Actualizar curso a READY con t√≠tulo/desc b√°sicos, m√≥dulos y lista
      await db.course.update({
        where: { courseId },
        data: {
          status: 'READY',
          title: doc.meta.topic,
          description: firstParagraph,
          totalModules: totalModules,
          moduleList: JSON.stringify(moduleTitles),
          topics: JSON.stringify(courseTopics.slice(0, 5)),
          language: doc.locale,
        },
      });
      console.log('‚úÖ Course status updated to READY');

      // Los m√≥dulos 2-5 se generar√°n solo cuando el usuario inicie el curso
      console.log(
        'üìù Modules 2-5 will be generated when user starts the course'
      );

      await db.generationLog.create({
        data: {
          courseId: course.id,
          action: 'content_ready',
          message: 'ContentDocument generated and stored',
        },
      });
      console.log('‚úÖ Generation log created');

      const response: CourseCreateResponse = {
        id: course.id,
        status: 'ready',
        title: doc.meta.topic,
        message: 'Curso creado con ContentDocument listo para renderizar',
      };

      console.log('üéâ Course creation completed successfully!');
      return NextResponse.json(response);
    } catch (error) {
      console.error('üí• Course generation failed:', error);

      // Log detailed error
      const errorMessage =
        error instanceof Error ? error.message : String(error);
      const errorStack = error instanceof Error ? error.stack : undefined;

      console.error('Error details:', {
        message: errorMessage,
        stack: errorStack,
        courseId: course.id,
      });

      // Log error and update status
      await db.generationLog.create({
        data: {
          courseId: course.id,
          action: 'generation_error',
          message: `Generation failed: ${errorMessage}`,
          details: JSON.stringify({ error: errorMessage, stack: errorStack }),
        },
      });

      await db.course.update({
        where: { courseId },
        data: { status: 'FAILED' },
      });

      return NextResponse.json(
        {
          error: 'Course generation failed. Please try again.',
          details: errorMessage,
          courseId: course.id,
        },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Course creation error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
