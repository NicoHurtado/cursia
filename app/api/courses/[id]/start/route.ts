import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import { db } from '@/lib/db';
import { askClaude, generateCourseMetadata } from '@/lib/ai/anthropic';
import { simpleAI } from '@/lib/ai/simple';
import { ModuleContentSchema } from '@/lib/dto/course';
import { UserPlan } from '@/lib/plans';
import { ContractPromptBuilder } from '@/lib/ai/content-contract-prompts';
import { YouTubeService } from '@/lib/youtube';

// Funci√≥n para generar t√≠tulos espec√≠ficos de lecciones para cada m√≥dulo
async function generateSpecificLessonTitles(
  moduleTitle: string,
  courseTopic: string,
  level: string
): Promise<string[]> {
  try {
    console.log('ü§ñ Generating specific lesson titles using AI...');

    const systemPrompt = `Eres un experto en dise√±o de contenido educativo. Tu tarea es generar 5 t√≠tulos de lecciones espec√≠ficas y √∫nicas para un m√≥dulo, RESPETANDO EL NIVEL del estudiante.

REGLAS CR√çTICAS:
- Cada lecci√≥n debe ser √öNICA y espec√≠fica del m√≥dulo
- NO uses plantillas gen√©ricas como "Fundamentos", "Conclusi√≥n", "¬øPara qu√© es necesario?"
- Cada t√≠tulo debe ser ACCIONABLE y CONCRETO
- Evita t√≠tulos vagos o gen√©ricos
- Las lecciones deben cubrir subtemas distintos sin solaparse
- Cada lecci√≥n debe mapearse directamente al tema del m√≥dulo
- ‚ö†Ô∏è RESPETA EL NIVEL: La progresi√≥n debe ser apropiada para el nivel del estudiante

PROGRESI√ìN SEG√öN NIVEL:

üü¢ BEGINNER: UN concepto/lecci√≥n, progresi√≥n gradual
üîµ INTERMEDIATE: 2-3 conceptos relacionados
üî¥ ADVANCED: M√∫ltiples conceptos complejos

FORMATO DE SALIDA:
Responde SOLO con un JSON v√°lido que contenga un array de 5 t√≠tulos:
{
  "lessonTitles": [
    "T√≠tulo espec√≠fico y accionable 1",
    "T√≠tulo espec√≠fico y accionable 2",
    "T√≠tulo espec√≠fico y accionable 3",
    "T√≠tulo espec√≠fico y accionable 4",
    "T√≠tulo espec√≠fico y accionable 5"
  ]
}

‚ö†Ô∏è CR√çTICO: Si el nivel es "beginner", la progresi√≥n debe ser EXTREMADAMENTE gradual. NO saltes conceptos.`;

    const userPrompt = `Genera 5 t√≠tulos de lecciones espec√≠ficas y √∫nicas para el m√≥dulo "${moduleTitle}" del curso sobre "${courseTopic}" (nivel: ${level}).

‚ö†Ô∏è NIVEL: ${level.toUpperCase()} - ${level === 'beginner' ? 'PROGRESI√ìN MUY GRADUAL' : level === 'intermediate' ? 'PROGRESI√ìN MODERADA' : 'PROGRESI√ìN R√ÅPIDA'}

IMPORTANTE:
- Los t√≠tulos deben ser espec√≠ficos del tema del m√≥dulo
- Deben ser accionables y concretos
- No uses plantillas gen√©ricas
- Cada lecci√≥n debe abordar un subtema distinto
- Los t√≠tulos deben reflejar el contenido espec√≠fico que se ense√±ar√°
${level === 'beginner' ? '- ‚ö†Ô∏è CR√çTICO: Este es nivel BEGINNER - cada lecci√≥n debe introducir UN SOLO concepto b√°sico\n- NO asumas conocimiento previo\n- La progresi√≥n debe ser paso a paso, muy gradual' : ''}

M√ìDULO: ${moduleTitle}
CURSO: ${courseTopic}
NIVEL: ${level}

Responde SOLO con el JSON solicitado.`;

    const response = await askClaude({
      system: systemPrompt,
      user: userPrompt,
    });

    // Intentar parsear la respuesta JSON
    let lessonTitles: string[] = [];

    try {
      const jsonResponse = JSON.parse(response);
      if (
        jsonResponse.lessonTitles &&
        Array.isArray(jsonResponse.lessonTitles)
      ) {
        lessonTitles = jsonResponse.lessonTitles.slice(0, 5);
      }
    } catch (parseError) {
      console.error('‚ùå Error parsing lesson titles JSON:', parseError);
      console.log('Raw response:', response);

      // Fallback: extraer t√≠tulos del texto si el JSON falla
      const lines = response.split('\n').filter(line => line.trim());
      lessonTitles = lines
        .filter(line => line.match(/^\d+\.|^[-*]\s/))
        .map(line => line.replace(/^\d+\.\s*|^[-*]\s*/, '').trim())
        .slice(0, 5);
    }

    // Asegurar que tenemos exactamente 5 t√≠tulos
    while (lessonTitles.length < 5) {
      lessonTitles.push(
        `Lecci√≥n espec√≠fica ${lessonTitles.length + 1} de ${moduleTitle}`
      );
    }

    console.log('‚úÖ Generated specific lesson titles:', lessonTitles);
    return lessonTitles;
  } catch (error) {
    console.error('‚ùå Error generating specific lesson titles:', error);

    // Fallback: t√≠tulos espec√≠ficos basados en el m√≥dulo
    return generateFallbackLessonTitles(moduleTitle, courseTopic);
  }
}

// Funci√≥n para generar t√≠tulos de fallback espec√≠ficos
function generateFallbackLessonTitles(
  moduleTitle: string,
  courseTopic: string
): string[] {
  const moduleLower = moduleTitle.toLowerCase();
  const courseLower = courseTopic.toLowerCase();

  // T√≠tulos espec√≠ficos basados en el tema del m√≥dulo
  if (moduleLower.includes('manipulaci√≥n') || moduleLower.includes('datos')) {
    return [
      'Manejo de errores b√°sicos en pipelines de datos',
      'T√©cnicas de limpieza y normalizaci√≥n',
      'Preparaci√≥n de datos para modelos',
      'Tratamiento de valores nulos y outliers',
      'Optimizaci√≥n de rendimiento en procesamiento',
    ];
  } else if (
    moduleLower.includes('cocina') ||
    moduleLower.includes('receta') ||
    courseLower.includes('comida')
  ) {
    return [
      'Selecci√≥n y almacenamiento de ingredientes frescos',
      'T√©cnicas de cocci√≥n que preservan nutrientes',
      'Combinaci√≥n de sabores y texturas equilibradas',
      'Adaptaci√≥n de recetas tradicionales a versiones saludables',
      'Planificaci√≥n de men√∫s semanales balanceados',
    ];
  } else if (
    moduleLower.includes('programaci√≥n') ||
    moduleLower.includes('c√≥digo') ||
    courseLower.includes('python')
  ) {
    return [
      'Configuraci√≥n del entorno de desarrollo',
      'Estructuras de datos fundamentales',
      'Control de flujo y funciones',
      'Manejo de errores y debugging',
      'Mejores pr√°cticas y optimizaci√≥n',
    ];
  } else if (
    moduleLower.includes('arte') ||
    moduleLower.includes('dibujo') ||
    courseLower.includes('creativo')
  ) {
    return [
      'Fundamentos de composici√≥n visual',
      'T√©cnicas de color y contraste',
      'Perspectiva y proporciones',
      'Estilos y expresi√≥n personal',
      'Proyecto final integrador',
    ];
  } else {
    // Fallback gen√©rico pero m√°s espec√≠fico
    return [
      `Fundamentos espec√≠ficos de ${moduleTitle}`,
      `Aplicaciones pr√°cticas en ${moduleTitle}`,
      `T√©cnicas avanzadas de ${moduleTitle}`,
      `Casos de uso reales de ${moduleTitle}`,
      `Integraci√≥n y mejores pr√°cticas de ${moduleTitle}`,
    ];
  }
}

// Funci√≥n para generar lecciones completas e individuales usando IA (mismo sistema que M√≥dulo 1)
async function generateCompleteLessonsForModule(
  moduleTitle: string,
  courseTopic: string,
  level: string
) {
  // Importar dependencias din√°micamente para evitar duplicaciones
  const { normalizeToContract } = await import('@/lib/content-normalizer');
  const { ContentContractValidator } = await import('@/lib/content-contract');
  const { parseAIJsonRobust, repairContentDocument } = await import('@/lib/json-parser-robust');

  const lessons = [];
  // Generate specific lesson titles for this module
  const lessonTitles = await generateSpecificLessonTitles(
    moduleTitle,
    courseTopic,
    level
  );

  console.log(`üéØ Generating 5 complete lessons for module: ${moduleTitle}`);

  for (let i = 0; i < lessonTitles.length; i++) {
    const lessonTitle = lessonTitles[i];
    const lessonNumber = i + 1;

    try {
      console.log(`üìö Generating lesson ${lessonNumber}/5: ${lessonTitle}`);

      // Generar lecci√≥n completa usando IA
      const systemPrompt = ContractPromptBuilder.buildSystemPrompt('chunk');
      const userPrompt = ContractPromptBuilder.buildUserPrompt('chunk', {
        topic: courseTopic,
        level: level,
        interests: [],
        moduleTitle: moduleTitle,
        lessonTitle: lessonTitle,
        lessonNumber: lessonNumber,
        totalLessons: 5,
      });

      const aiResponse = await askClaude({
        system: systemPrompt,
        user: userPrompt,
      });

      // Parsear y normalizar la respuesta usando el parser robusto
      let lessonDoc;
      try {
        console.log('üîß Parsing AI response with robust parser...');
        lessonDoc = parseAIJsonRobust(aiResponse);

        // Reparar documento si es necesario
        lessonDoc = repairContentDocument(lessonDoc);

        console.log('‚úÖ JSON parsed and repaired successfully');
      } catch (parseError) {
        console.error('‚ùå JSON parse error for lesson:', parseError);
        console.log('üîÑ Retrying lesson generation with stricter JSON instructions...');

        // RETRY: Intentar una vez m√°s con instrucciones m√°s estrictas
        try {
          const retryPrompt = ContractPromptBuilder.buildUserPrompt('chunk', {
            topic: courseTopic,
            level: level as 'beginner' | 'intermediate' | 'advanced',
            interests: [],
            lessonTitle: lessonTitles[lessonNumber - 1],
            lessonNumber: lessonNumber,
            totalLessons: 5,
          });

          const stricterPrompt = `${retryPrompt}

‚ö†Ô∏è CR√çTICO - FORMATO JSON ESTRICTO:
- Verifica que TODAS las comillas est√©n cerradas
- Verifica que TODAS las comas est√©n presentes
- Verifica que TODOS los corchetes [] y llaves {} est√©n balanceados
- NO incluyas saltos de l√≠nea dentro de strings
- USA comillas dobles " no simples '
- Despu√©s de CADA propiedad debe haber una coma, excepto la √∫ltima

Revisa el JSON ANTES de responder. Debe ser 100% v√°lido.`;

          const retryResponse = await generateCourseMetadata(
            stricterPrompt,
            level,
            []
          );

          console.log('üîß Parsing retry response...');
          lessonDoc = parseAIJsonRobust(retryResponse);
          lessonDoc = repairContentDocument(lessonDoc);
          console.log('‚úÖ Retry successful!');

        } catch (retryError) {
          console.error('‚ùå Retry also failed:', retryError);
          console.error('AI Response preview:', aiResponse.substring(0, 500));
          throw new Error(`No valid JSON found after retry: ${parseError instanceof Error ? parseError.message : String(parseError)}`);
        }
      }

      // Normalizar el documento
      const normalizedDoc = normalizeToContract(lessonDoc);

      // Validar el documento
      const validationResult =
        ContentContractValidator.validateDocument(normalizedDoc);
      if (!validationResult.isValid) {
        console.error(
          '‚ùå Content validation failed for lesson:',
          validationResult.errors
        );
        throw new Error(
          `Content validation failed: ${validationResult.errors.join(', ')}`
        );
      }

      // Buscar video para la lecci√≥n 2
      let videoData = null;
      if (lessonNumber === 2) {
        try {
          console.log(`üé• Searching for video for lesson: ${lessonTitle}`);
          console.log(
            `üîç YouTube API Key available: ${process.env.YOUTUBE_DATA_API_KEY ? 'YES' : 'NO'}`
          );

          // Crear contenido de la lecci√≥n para la b√∫squeda de video
          const lessonContent = normalizedDoc.blocks
            .map(block => {
              if (block.type === 'paragraph')
                return (block.data as any).text || '';
              if (block.type === 'heading')
                return (block.data as any).text || '';
              return '';
            })
            .join(' ')
            .slice(0, 500); // Limitar contenido para la b√∫squeda

          // Crear una consulta de b√∫squeda espec√≠fica del m√≥dulo
          const moduleSpecificQuery = `${moduleTitle} ${lessonTitle}`;

          // Usar Promise.race para timeout de 10 segundos
          const videoPromise = YouTubeService.findVideoForChunk(
            moduleSpecificQuery,
            lessonContent,
            courseTopic,
            lessonNumber
          );

          const timeoutPromise = new Promise((_, reject) =>
            setTimeout(() => reject(new Error('Video search timeout')), 10000)
          );

          const video = (await Promise.race([
            videoPromise,
            timeoutPromise,
          ])) as any;
          if (video && video.title) {
            videoData = JSON.stringify(video);
            console.log(`‚úÖ Video found: ${video.title}`);
          } else {
            console.log('‚ö†Ô∏è No video found for this lesson');
          }
        } catch (videoError) {
          console.error('‚ùå Error searching for video:', videoError);
        }
      }

      lessons.push({
        title: lessonTitle,
        blocks: normalizedDoc.blocks,
        videoData: videoData,
      });

      console.log(`‚úÖ Lesson ${lessonNumber} generated successfully`);
    } catch (error) {
      console.error(`‚ùå Error generating lesson ${lessonNumber}:`, error);
      throw error; // Re-throw para que se maneje en el nivel superior
    }
  }

  // Generar preguntas de quiz basadas en el contenido del m√≥dulo
  console.log(`üìù Generating quiz questions for module: ${moduleTitle}`);
  const moduleContent = lessons
    .map(lesson => `${lesson.title}: ${JSON.stringify(lesson.blocks)}`)
    .join('\n\n');

  const quizQuestions = await generateQuizQuestions(
    moduleTitle,
    moduleContent,
    courseTopic,
    level
  );

  return {
    lessons,
    quizQuestions,
  };
}

// Funci√≥n para generar preguntas de quiz usando IA
async function generateQuizQuestions(
  moduleTitle: string,
  moduleContent: string,
  courseTopic: string,
  level: string
): Promise<any[]> {
  try {
    console.log('ü§ñ Generating quiz questions using AI...');

    const systemPrompt = `Eres un experto en educaci√≥n y evaluaci√≥n. Tu tarea es generar 5 preguntas de quiz MUY ESPEC√çFICAS del contenido del m√≥dulo.

REGLAS CR√çTICAS:
- Genera exactamente 5 preguntas
- Cada pregunta debe tener 4 opciones de respuesta
- Las preguntas DEBEN ser sobre conceptos, t√©cnicas, m√©todos, ingredientes, procesos o informaci√≥n espec√≠fica del tema
- NO uses preguntas gen√©ricas como "¬øCu√°l es el concepto principal?"
- Las preguntas deben ser sobre detalles espec√≠ficos del contenido
- Una opci√≥n debe ser claramente correcta, las otras 3 deben ser incorrectas pero plausibles
- Usa un lenguaje claro y profesional en espa√±ol
- Las preguntas deben evaluar comprensi√≥n profunda del tema

EJEMPLOS DE BUENAS PREGUNTAS:
- Para comida saludable: "¬øCu√°les son las prote√≠nas presentes en el salm√≥n?", "¬øCu√°l es el mejor m√©todo para cocinar verduras al vapor?", "¬øQu√© vitaminas se pierden al fre√≠r los alimentos?"
- Para programaci√≥n: "¬øQu√© patr√≥n de dise√±o se usa para crear objetos sin especificar su clase?", "¬øCu√°l es la complejidad temporal del algoritmo de ordenamiento burbuja?"
- Para arte: "¬øQu√© t√©cnica de pintura al √≥leo permite crear transiciones suaves?", "¬øCu√°l es la regla de los tercios en composici√≥n fotogr√°fica?"

CONTENIDO DEL M√ìDULO: ${moduleContent}
T√çTULO DEL M√ìDULO: ${moduleTitle}
TEMA DEL CURSO: ${courseTopic}
NIVEL: ${level}

Responde SOLO con un JSON v√°lido que contenga un array de 5 preguntas:
{
  "questions": [
    {
      "question": "Pregunta espec√≠fica sobre detalles del tema",
      "options": ["Respuesta espec√≠fica correcta", "Respuesta incorrecta pero plausible", "Otra respuesta incorrecta", "Cuarta respuesta incorrecta"],
      "correctAnswer": 0,
      "explanation": "Explicaci√≥n espec√≠fica de por qu√© la respuesta es correcta"
    }
  ]
}`;

    const userPrompt = `Genera 5 preguntas de quiz MUY ESPEC√çFICAS para el m√≥dulo "${moduleTitle}" sobre "${courseTopic}".

IMPORTANTE: Las preguntas deben ser sobre:
- Conceptos espec√≠ficos del tema
- T√©cnicas, m√©todos o procesos mencionados
- Ingredientes, herramientas o elementos espec√≠ficos
- Detalles t√©cnicos o informaci√≥n concreta
- Aplicaciones pr√°cticas del contenido

NO uses preguntas gen√©ricas. Cada pregunta debe requerir conocimiento espec√≠fico del contenido del m√≥dulo.

Responde SOLO con el JSON solicitado.`;

    const response = await askClaude({
      system: systemPrompt,
      user: userPrompt,
    });

    // Intentar parsear la respuesta JSON
    let questions: any[] = [];

    try {
      const jsonResponse = JSON.parse(response);
      if (jsonResponse.questions && Array.isArray(jsonResponse.questions)) {
        questions = jsonResponse.questions.slice(0, 5);
      }
    } catch (parseError) {
      console.error('‚ùå Error parsing quiz questions JSON:', parseError);
      console.log('Raw response:', response);

      // Fallback: generar preguntas b√°sicas
      questions = generateFallbackQuizQuestions(moduleTitle, courseTopic);
    }

    // Asegurar que tenemos exactamente 5 preguntas
    while (questions.length < 5) {
      questions.push(
        generateFallbackQuizQuestion(
          moduleTitle,
          courseTopic,
          questions.length + 1
        )
      );
    }

    console.log('‚úÖ Generated quiz questions:', questions.length);
    return questions;
  } catch (error) {
    console.error('‚ùå Error generating quiz questions:', error);

    // Fallback: generar preguntas b√°sicas
    return generateFallbackQuizQuestions(moduleTitle, courseTopic);
  }
}

// Funci√≥n para generar preguntas de fallback
function generateFallbackQuizQuestions(
  moduleTitle: string,
  courseTopic: string
): any[] {
  const questions = [];

  for (let i = 1; i <= 5; i++) {
    questions.push(generateFallbackQuizQuestion(moduleTitle, courseTopic, i));
  }

  return questions;
}

// Funci√≥n para generar una pregunta de fallback individual
function generateFallbackQuizQuestion(
  moduleTitle: string,
  courseTopic: string,
  questionNumber: number
): any {
  // Generar preguntas m√°s espec√≠ficas basadas en el tema del curso
  const isHealthyFood =
    courseTopic.toLowerCase().includes('comida') ||
    courseTopic.toLowerCase().includes('alimentaci√≥n') ||
    courseTopic.toLowerCase().includes('saludable');
  const isProgramming =
    courseTopic.toLowerCase().includes('programaci√≥n') ||
    courseTopic.toLowerCase().includes('c√≥digo') ||
    courseTopic.toLowerCase().includes('desarrollo');
  const isArt =
    courseTopic.toLowerCase().includes('arte') ||
    courseTopic.toLowerCase().includes('dibujo') ||
    courseTopic.toLowerCase().includes('pintura');

  let questionTemplates: string[];
  let optionTemplates: string[][];
  let explanations: string[];

  if (isHealthyFood) {
    questionTemplates = [
      `¬øCu√°les son las prote√≠nas principales en ${moduleTitle}?`,
      `¬øCu√°l es el mejor m√©todo de cocci√≥n para ${moduleTitle}?`,
      `¬øQu√© vitaminas se conservan mejor en ${moduleTitle}?`,
      `¬øCu√°l es la temperatura ideal para cocinar ${moduleTitle}?`,
      `¬øQu√© nutrientes aporta principalmente ${moduleTitle}?`,
    ];
    optionTemplates = [
      [
        'Prote√≠nas completas',
        'Prote√≠nas incompletas',
        'Solo carbohidratos',
        'Solo grasas',
      ],
      ['Al vapor', 'Frito', 'Crudo', 'Quemado'],
      [
        'Vitaminas hidrosolubles',
        'Vitaminas liposolubles',
        'Solo minerales',
        'Solo fibra',
      ],
      ['180¬∞C', '100¬∞C', '300¬∞C', '50¬∞C'],
      ['Prote√≠nas', 'Carbohidratos', 'Grasas saturadas', 'Az√∫cares'],
    ];
    explanations = [
      'Las prote√≠nas completas contienen todos los amino√°cidos esenciales.',
      'La cocci√≥n al vapor preserva mejor los nutrientes.',
      'Las vitaminas hidrosolubles se conservan mejor con este m√©todo.',
      'Esta temperatura es ideal para cocci√≥n saludable.',
      'Este nutriente es el principal aporte nutricional.',
    ];
  } else if (isProgramming) {
    questionTemplates = [
      `¬øQu√© patr√≥n de dise√±o se aplica en ${moduleTitle}?`,
      `¬øCu√°l es la complejidad temporal de ${moduleTitle}?`,
      `¬øQu√© estructura de datos se usa en ${moduleTitle}?`,
      `¬øCu√°l es el principio SOLID aplicado en ${moduleTitle}?`,
      `¬øQu√© algoritmo se implementa en ${moduleTitle}?`,
    ];
    optionTemplates = [
      ['Singleton', 'Factory', 'Observer', 'Decorator'],
      ['O(n)', 'O(log n)', 'O(n¬≤)', 'O(1)'],
      ['Array', 'Lista enlazada', 'Hash table', 'Stack'],
      [
        'Single Responsibility',
        'Open/Closed',
        'Liskov Substitution',
        'Interface Segregation',
      ],
      ['B√∫squeda binaria', 'Ordenamiento burbuja', 'Recursi√≥n', 'Iteraci√≥n'],
    ];
    explanations = [
      'Este patr√≥n es el m√°s apropiado para este caso de uso.',
      'Esta es la complejidad temporal correcta del algoritmo.',
      'Esta estructura de datos es la m√°s eficiente para este problema.',
      'Este principio SOLID se aplica directamente en esta situaci√≥n.',
      'Este algoritmo es el m√°s eficiente para resolver el problema.',
    ];
  } else if (isArt) {
    questionTemplates = [
      `¬øQu√© t√©cnica de color se usa en ${moduleTitle}?`,
      `¬øCu√°l es la regla de composici√≥n aplicada en ${moduleTitle}?`,
      `¬øQu√© material es m√°s apropiado para ${moduleTitle}?`,
      `¬øCu√°l es el principio de perspectiva en ${moduleTitle}?`,
      `¬øQu√© estilo art√≠stico se refleja en ${moduleTitle}?`,
    ];
    optionTemplates = [
      ['Complementarios', 'An√°logos', 'Monocrom√°ticos', 'Tri√°dicos'],
      ['Regla de tercios', 'Simetr√≠a', 'Punto de fuga', 'L√≠neas gu√≠a'],
      ['√ìleo', 'Acuarela', 'Carboncillo', 'L√°piz'],
      ['Punto de fuga', 'Escala de valores', 'Proporci√≥n √°urea', 'Contraste'],
      ['Realismo', 'Impresionismo', 'Abstracto', 'Cubismo'],
    ];
    explanations = [
      'Esta t√©cnica de color crea el efecto visual deseado.',
      'Esta regla de composici√≥n mejora la armon√≠a visual.',
      'Este material es el m√°s apropiado para la t√©cnica.',
      'Este principio de perspectiva es fundamental en la composici√≥n.',
      'Este estilo art√≠stico se refleja en las caracter√≠sticas visuales.',
    ];
  } else {
    // Fallback gen√©rico pero m√°s espec√≠fico
    questionTemplates = [
      `¬øCu√°l es el m√©todo principal utilizado en ${moduleTitle}?`,
      `¬øQu√© caracter√≠stica espec√≠fica define ${moduleTitle}?`,
      `¬øCu√°l es el proceso clave en ${moduleTitle}?`,
      `¬øQu√© elemento es fundamental en ${moduleTitle}?`,
      `¬øCu√°l es la t√©cnica principal de ${moduleTitle}?`,
    ];
    optionTemplates = [
      [
        'M√©todo principal',
        'M√©todo secundario',
        'M√©todo alternativo',
        'M√©todo b√°sico',
      ],
      [
        'Caracter√≠stica espec√≠fica',
        'Caracter√≠stica general',
        'Caracter√≠stica opcional',
        'Caracter√≠stica b√°sica',
      ],
      [
        'Proceso clave',
        'Proceso secundario',
        'Proceso alternativo',
        'Proceso b√°sico',
      ],
      [
        'Elemento fundamental',
        'Elemento secundario',
        'Elemento opcional',
        'Elemento b√°sico',
      ],
      [
        'T√©cnica principal',
        'T√©cnica secundaria',
        'T√©cnica alternativa',
        'T√©cnica b√°sica',
      ],
    ];
    explanations = [
      'Este m√©todo es el m√°s efectivo para lograr los objetivos.',
      'Esta caracter√≠stica es la que define espec√≠ficamente el concepto.',
      'Este proceso es esencial para el funcionamiento correcto.',
      'Este elemento es fundamental para el √©xito del m√©todo.',
      'Esta t√©cnica es la m√°s apropiada para la situaci√≥n.',
    ];
  }

  const templateIndex = (questionNumber - 1) % questionTemplates.length;

  return {
    question: questionTemplates[templateIndex],
    options: optionTemplates[templateIndex],
    correctAnswer: 0,
    explanation: explanations[templateIndex],
  };
}

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const { id: courseId } = await params;

    // Get user info to check plan
    const user = await db.user.findUnique({
      where: { id: session.user.id },
      select: { plan: true },
    });

    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 });
    }

    // Verify the course can be accessed by the user
    // Only allow access to courses that the user owns (either created by them or cloned from community)
    const course = await db.course.findFirst({
      where: {
        id: courseId,
        userId: session.user.id, // User must own the course (own or cloned)
        deletedAt: null, // Not deleted
      },
    });

    if (!course) {
      return NextResponse.json({ error: 'Course not found' }, { status: 404 });
    }

    // Check if course has metadata
    if (!course.title || !course.description) {
      return NextResponse.json(
        { error: 'Course metadata not ready' },
        { status: 400 }
      );
    }

    // Get existing modules with their chunks
    const existingModules = await db.module.findMany({
      where: {
        courseId: courseId,
      },
      include: {
        chunks: true,
      },
      orderBy: {
        moduleOrder: 'asc',
      },
    });

    // Parse module list once at the beginning
    const moduleList = JSON.parse(course.moduleList);

    // Check if module 1 has content
    const module1 = existingModules.find(m => m.moduleOrder === 1);
    if (!module1 || module1.chunks.length === 0) {
      console.log(
        'Module 1 not ready yet - content is being generated in background'
      );
      return NextResponse.json(
        {
          error:
            'Module 1 content is still being generated. Please wait a moment and try again.',
          status: 'generating',
        },
        { status: 202 }
      );
    }

    // Check if we need to generate remaining modules in background
    const modulesToGenerate = existingModules.filter(
      module => module.chunks.length === 0 && module.moduleOrder > 1
    );

    if (modulesToGenerate.length > 0) {
      console.log(
        `üöÄ Starting background generation for ${modulesToGenerate.length} remaining modules...`
      );

      // Generar m√≥dulos en background sin bloquear la respuesta
      generateRemainingModulesDirectly(courseId, course)
        .then(() => {
          console.log('üéâ Background module generation completed successfully');
        })
        .catch(error => {
          console.error('‚ùå Error generating remaining modules:', error);
        });
    }

    // Check if this is the first time starting this course
    const hasStartedBefore = await db.userProgress.findFirst({
      where: {
        userId: session.user.id,
        courseId: courseId,
      },
    });

    // Only count the course if it's the first time starting
    if (!hasStartedBefore) {
      // Create UserProgress record to track that this course has been started
      await db.userProgress.create({
        data: {
          userId: session.user.id,
          courseId: courseId,
        },
      });

      console.log(
        `‚úÖ Course ${courseId} started and counted for user ${session.user.id}`
      );
      console.log(
        `üìä UserProgress record created at: ${new Date().toISOString()}`
      );
    } else {
      console.log(
        `‚ÑπÔ∏è Course ${courseId} already started before, not counting again`
      );
    }

    // Course is ready to start - module 1 has content
    return NextResponse.json({
      success: true,
      message: 'Course started successfully',
      modulesReady: existingModules.filter(m => m.chunks.length > 0).length,
      totalModules: course.totalModules,
    });
  } catch (error) {
    console.error('Start course error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

// Background generation function
async function generateModulesInBackground(
  courseId: string,
  modulesToGenerate: any[],
  moduleList: string[],
  course: any
) {
  console.log(`üîÑ Starting background generation for course ${courseId}`);

  try {
    // Import required modules
    const { simpleAI } = await import('@/lib/ai/simple');
    const { YouTubeService } = await import('@/lib/youtube');

    for (const module of modulesToGenerate) {
      const moduleTitle = moduleList[module.moduleOrder - 1];

      if (moduleTitle) {
        try {
          console.log(
            `üìù [BACKGROUND] Generating module ${module.moduleOrder}: ${moduleTitle}`
          );

          // Generate module content
          const moduleContentJson = await simpleAI.generateModuleContent(
            course.title || 'Course',
            moduleTitle,
            module.moduleOrder,
            course.totalModules,
            course.description || ''
          );
          // Since generateModuleContent already returns a structured object,
          // do not JSON.parse. Use it directly.
          const moduleContent = moduleContentJson;

          // Update module with generated content
          await db.module.update({
            where: { id: module.id },
            data: {
              title: moduleContent.title,
              description: moduleContent.description,
            },
          });

          // Create chunks with videos
          for (let j = 0; j < moduleContent.chunks.length; j++) {
            const chunk = moduleContent.chunks[j];
            const chunkOrder = j + 1;

            // Search for video if this is the second chunk
            let videoData = null;
            if (chunkOrder === 2) {
              try {
                const video = await YouTubeService.findVideoForChunk(
                  chunk.title,
                  chunk.content,
                  course.title || 'Course',
                  chunkOrder
                );
                if (video) {
                  videoData = JSON.stringify(video);
                  console.log(
                    `‚úÖ [BACKGROUND] Video found for chunk: ${chunk.title}`
                  );
                }
              } catch (error) {
                console.error('[BACKGROUND] Error searching for video:', error);
              }
            }

            await db.chunk.create({
              data: {
                moduleId: module.id,
                chunkOrder: chunkOrder,
                title: chunk.title,
                content: chunk.content,
                videoData: videoData,
              },
            });
          }

          // Create quiz
          const quiz = await db.quiz.create({
            data: {
              moduleId: module.id,
              quizOrder: 1,
              title: moduleContent.quiz.title,
            },
          });

          // Create quiz questions
          for (const [
            index,
            question,
          ] of moduleContent.quiz.questions.entries()) {
            await db.quizQuestion.create({
              data: {
                quizId: quiz.id,
                questionOrder: index + 1,
                question: question.question,
                options: JSON.stringify(question.options),
                correctAnswer: question.correctAnswer,
                explanation: question.explanation || null,
              },
            });
          }

          console.log(
            `‚úÖ [BACKGROUND] Module ${module.moduleOrder} generated successfully`
          );

          // Small delay between modules to avoid overwhelming the API
          await new Promise(resolve => setTimeout(resolve, 2000));
        } catch (error) {
          console.error(
            `‚ùå [BACKGROUND] Error generating module ${module.moduleOrder}:`,
            error
          );
        }
      }
    }

    console.log(
      `üéâ [BACKGROUND] All modules generated successfully for course ${courseId}`
    );
  } catch (error) {
    console.error(
      `‚ùå [BACKGROUND] Failed to generate modules for course ${courseId}:`,
      error
    );
  }
}

// Funci√≥n para generar m√≥dulos restantes directamente usando el mismo sistema que M√≥dulo 1
async function generateRemainingModulesDirectly(courseId: string, course: any) {
  try {
    console.log(
      'üöÄ Starting direct generation for remaining modules using Module 1 system...'
    );

    // Obtener la lista de m√≥dulos del curso
    const moduleList = JSON.parse(course.moduleList || '[]');
    const remainingModules = moduleList.slice(1); // M√≥dulos 2-5

    if (remainingModules.length === 0) {
      console.log('No modules to generate');
      return;
    }

    for (let i = 0; i < remainingModules.length; i++) {
      const moduleTitle = remainingModules[i];
      const moduleNumber = i + 2; // M√≥dulos 2-5

      try {
        console.log(
          `üìö Generating Module ${moduleNumber}: ${moduleTitle} using Module 1 system`
        );
        console.log(`üîÑ Progress: ${i + 1}/${remainingModules.length} modules`);

        // Usar el mismo sistema que M√≥dulo 1: generar lecciones individuales completas
        const moduleResult = await generateCompleteLessonsForModule(
          moduleTitle,
          course.title || 'Course',
          course.userLevel || 'intermedio'
        );
        const moduleLessons = moduleResult.lessons;
        const moduleQuizQuestions = moduleResult.quizQuestions;

        console.log(
          `‚úÖ Generated ${moduleLessons.length} lessons for Module ${moduleNumber}`
        );

        // Verificar si el m√≥dulo ya existe, si no, crearlo
        let module = await db.module.findFirst({
          where: {
            courseId: courseId,
            moduleOrder: moduleNumber,
          },
        });

        if (!module) {
          // Crear el m√≥dulo en la base de datos
          module = await db.module.create({
            data: {
              courseId: courseId,
              moduleOrder: moduleNumber,
              title: moduleTitle,
              description: `M√≥dulo ${moduleNumber}: ${moduleTitle}`,
            },
          });
        } else {
          // Actualizar el m√≥dulo existente
          module = await db.module.update({
            where: { id: module.id },
            data: {
              title: moduleTitle,
              description: `M√≥dulo ${moduleNumber}: ${moduleTitle}`,
            },
          });
        }

        // Crear las 5 lecciones del m√≥dulo usando el sistema robusto
        console.log(
          `üìù Creating ${moduleLessons.length} chunks for module ${moduleNumber}...`
        );
        for (let j = 0; j < moduleLessons.length; j++) {
          const lesson = moduleLessons[j];
          const lessonNumber = j + 1;
          console.log(`  üìÑ Creating chunk ${lessonNumber}: ${lesson.title}`);

          const miniDoc = {
            version: '1.0',
            locale: 'es',
            content_id: `module_${moduleNumber}_lesson_${lessonNumber}`,
            meta: {
              topic: lesson.title,
              audience: 'Estudiantes',
              level: course.userLevel as
                | 'beginner'
                | 'intermediate'
                | 'advanced',
              created_at: new Date().toISOString().split('T')[0],
            },
            blocks: lesson.blocks,
          };

          // Verificar si el chunk ya existe
          const existingChunk = await db.chunk.findFirst({
            where: {
              moduleId: module.id,
              chunkOrder: j + 1,
            },
          });

          if (!existingChunk) {
            await db.chunk.create({
              data: {
                moduleId: module.id,
                chunkOrder: j + 1,
                title: lesson.title,
                content: JSON.stringify(miniDoc),
                videoData: lesson.videoData || null, // Incluir videoData si existe
              },
            });
            console.log(`  ‚úÖ Chunk ${lessonNumber} created`);
          } else {
            // Actualizar el chunk existente
            await db.chunk.update({
              where: { id: existingChunk.id },
              data: {
                title: lesson.title,
                content: JSON.stringify(miniDoc),
                videoData: lesson.videoData || null, // Incluir videoData si existe
              },
            });
            console.log(`  ‚úÖ Chunk ${lessonNumber} updated`);
          }
        }

        // Crear o actualizar quiz del m√≥dulo
        let quiz = await db.quiz.findFirst({
          where: {
            moduleId: module.id,
            quizOrder: 1,
          },
        });

        if (!quiz) {
          quiz = await db.quiz.create({
            data: {
              moduleId: module.id,
              quizOrder: 1,
              title: `Quiz: ${moduleTitle}`,
            },
          });
        } else {
          quiz = await db.quiz.update({
            where: { id: quiz.id },
            data: {
              title: `Quiz: ${moduleTitle}`,
            },
          });
        }

        // Generar 5 preguntas de quiz espec√≠ficas para este m√≥dulo
        console.log(`üìù Generating quiz questions for module: ${moduleTitle}`);

        // Obtener el contenido del m√≥dulo para generar preguntas espec√≠ficas
        const moduleChunks = await db.chunk.findMany({
          where: { moduleId: module.id },
          orderBy: { chunkOrder: 'asc' },
        });

        const moduleContentText = moduleChunks
          .map(chunk => `${chunk.title}: ${chunk.content}`)
          .join('\n\n');

        // Generar preguntas usando IA
        const generatedQuizQuestions = await generateQuizQuestions(
          moduleTitle,
          moduleContentText,
          course.title || '',
          course.level || 'intermedio'
        );

        // Eliminar preguntas existentes
        await db.quizQuestion.deleteMany({
          where: { quizId: quiz.id },
        });

        // Crear las 5 preguntas del quiz
        for (let q = 0; q < generatedQuizQuestions.length; q++) {
          const question = generatedQuizQuestions[q];
          await db.quizQuestion.create({
            data: {
              quizId: quiz.id,
              questionOrder: q + 1,
              question: question.question,
              options: JSON.stringify(question.options),
              correctAnswer: question.correctAnswer,
              explanation: question.explanation,
            },
          });
        }
        console.log(
          `‚úÖ Created ${generatedQuizQuestions.length} quiz questions for module ${moduleNumber}`
        );

        console.log(`‚úÖ Module ${moduleNumber} completed successfully`);

        // Peque√±a pausa entre m√≥dulos para no sobrecargar
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (error) {
        console.error(`‚ùå Error generating Module ${moduleNumber}:`, error);
        console.log(
          `‚ö†Ô∏è Skipping Module ${moduleNumber} and continuing with next module...`
        );
        // Continuar con el siguiente m√≥dulo en lugar de detener todo el proceso
        continue;
      }
    }

    console.log('üéâ All remaining modules generated successfully!');

    // Actualizar el estado del curso para indicar que todos los m√≥dulos est√°n listos
    await db.course.update({
      where: { id: courseId },
      data: {
        status: 'READY',
        updatedAt: new Date(),
      },
    });
  } catch (error) {
    console.error('‚ùå Error in generateRemainingModulesDirectly:', error);
    // No lanzar el error para evitar que detenga el proceso
    console.log('‚ö†Ô∏è Continuing despite error in module generation');
  }
}
// Funci√≥n para generar contenido de m√≥dulo usando IA
async function generateModuleContentWithAI(
  moduleTitle: string,
  courseTopic: string,
  level: string
) {
  try {
    console.log(`ü§ñ Generating AI content for module: ${moduleTitle}`);

    const systemPrompt = ContractPromptBuilder.buildSystemPrompt('module');
    const userPrompt = ContractPromptBuilder.buildUserPrompt('module', {
      topic: `${courseTopic} - ${moduleTitle}`,
      level: level as 'beginner' | 'intermediate' | 'advanced',
      interests: [],
    });

    const aiResponse = await generateCourseMetadata(userPrompt, level, []);

    // Parsear y normalizar la respuesta
    let doc;
    try {
      doc = JSON.parse(aiResponse);
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError);
      console.log('üîß Attempting to repair JSON...');

      // Intentar reparar JSON malformado
      const repairedJson = repairMalformedJson(aiResponse);
      if (repairedJson) {
        try {
          doc = JSON.parse(repairedJson);
          console.log('‚úÖ JSON repaired and parsed successfully');
        } catch (repairError) {
          console.error('‚ùå Repair failed:', repairError);
          // Intentar extraer JSON del markdown
          const jsonMatch =
            aiResponse.match(/```json\s*([\s\S]*?)\s*```/) ||
            aiResponse.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            const repairedMatch = repairMalformedJson(
              jsonMatch[1] || jsonMatch[0]
            );
            doc = JSON.parse(repairedMatch || jsonMatch[1] || jsonMatch[0]);
          } else {
            throw new Error('No valid JSON found in AI response');
          }
        }
      } else {
        // Intentar extraer JSON del markdown
        const jsonMatch =
          aiResponse.match(/```json\s*([\s\S]*?)\s*```/) ||
          aiResponse.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const repairedMatch = repairMalformedJson(
            jsonMatch[1] || jsonMatch[0]
          );
          doc = JSON.parse(repairedMatch || jsonMatch[1] || jsonMatch[0]);
        } else {
          throw new Error('No valid JSON found in AI response');
        }
      }
    }

    // Importar dependencias din√°micamente
    const { normalizeToContract } = await import('@/lib/content-normalizer');
    const { ContentContractValidator } = await import('@/lib/content-contract');

    // Normalizar y validar
    const normalizedDoc = normalizeToContract(doc);
    const validationResult =
      ContentContractValidator.validateDocument(normalizedDoc);

    if (!validationResult.isValid) {
      console.error('‚ùå Content validation failed:', validationResult.errors);
      throw new Error(
        `Invalid ContentDocument: ${validationResult.errors.join(', ')}`
      );
    }

    return {
      blocks: normalizedDoc.blocks,
      description:
        (
          normalizedDoc.blocks.find((b: any) => b.type === 'paragraph')
            ?.data as any
        )?.text?.slice(0, 300) || `M√≥dulo sobre ${moduleTitle}`,
    };
  } catch (error) {
    console.error(
      `‚ùå Error generating AI content for module ${moduleTitle}:`,
      error
    );
    // Fallback: generar contenido b√°sico
    return {
      blocks: [
        {
          id: `intro_${Date.now()}`,
          type: 'heading',
          data: { level: 1, text: moduleTitle },
        },
        {
          id: `content_${Date.now()}`,
          type: 'paragraph',
          data: {
            text: `En este m√≥dulo aprender√°s sobre ${moduleTitle.toLowerCase()}. Este contenido se est√° generando autom√°ticamente.`,
          },
        },
      ],
      description: `M√≥dulo sobre ${moduleTitle}`,
    };
  }
}

// Funci√≥n para dividir el contenido en lecciones din√°micas
function generateModuleLessonsFromContent(blocks: any[], moduleTitle: string) {
  const lessons = [];

  // Buscar headings H3 que representen lecciones espec√≠ficas
  const h3Indices = blocks
    .map((b, i) => ({ block: b, idx: i }))
    .filter(
      item => item.block.type === 'heading' && item.block.data?.level === 3
    );

  // Si hay suficientes H3, usarlos como lecciones
  if (h3Indices.length >= 4) {
    for (let i = 0; i < h3Indices.length; i++) {
      const start = h3Indices[i].idx;
      const end = h3Indices[i + 1]?.idx || blocks.length;
      const lessonBlocks = blocks.slice(start, end);
      const title = h3Indices[i].block.data.text;
      lessons.push({
        title,
        blocks: ensureCompleteLessonStructure(lessonBlocks, title),
      });
    }
  } else {
    // Buscar otros patrones de divisi√≥n (H2 secundarios, listas largas, etc.)
    const divisionPoints = findNaturalDivisionPoints(blocks);

    if (divisionPoints.length >= 4) {
      for (let i = 0; i < divisionPoints.length; i++) {
        const start = divisionPoints[i];
        const end = divisionPoints[i + 1] || blocks.length;
        const lessonBlocks = blocks.slice(start, end);
        const title = extractLessonTitle(lessonBlocks, moduleTitle, i + 1);
        lessons.push({
          title,
          blocks: ensureCompleteLessonStructure(lessonBlocks, title),
        });
      }
    } else {
      // Fallback: dividir por tama√±o equilibrado
      const size = Math.max(1, Math.ceil(blocks.length / 5));
      for (let i = 0; i < 5; i++) {
        const start = i * size;
        const end = Math.min(blocks.length, start + size);
        const lessonBlocks = blocks.slice(start, end);
        const title = extractLessonTitle(lessonBlocks, moduleTitle, i + 1);
        lessons.push({
          title,
          blocks: ensureCompleteLessonStructure(lessonBlocks, title),
        });
      }
    }
  }

  return lessons;
}

// Funci√≥n para encontrar puntos naturales de divisi√≥n en el contenido
function findNaturalDivisionPoints(blocks: any[]): number[] {
  const points: number[] = [];

  // Buscar H2, H3, listas largas, c√≥digo, etc.
  blocks.forEach((block, index) => {
    if (
      block.type === 'heading' &&
      (block.data?.level === 2 || block.data?.level === 3)
    ) {
      points.push(index);
    } else if (block.type === 'list' && block.data?.items?.length > 3) {
      points.push(index);
    } else if (block.type === 'code' && block.data?.snippet?.length > 100) {
      points.push(index);
    }
  });

  return points;
}

// Funci√≥n para extraer t√≠tulos de lecciones del contenido
function extractLessonTitle(
  blocks: any[],
  moduleTitle: string,
  lessonNumber: number
) {
  // Buscar el primer heading en los bloques
  const heading = blocks.find(b => b.type === 'heading');
  if (heading && heading.data?.text) {
    return heading.data.text;
  }

  // Buscar p√°rrafos que puedan ser t√≠tulos
  const paragraph = blocks.find(
    b => b.type === 'paragraph' && b.data?.text?.length < 100
  );
  if (paragraph && paragraph.data?.text) {
    return paragraph.data.text;
  }

  // Generar t√≠tulo basado en el contenido
  return generateDynamicLessonTitle(blocks, moduleTitle, lessonNumber);
}

// Funci√≥n para generar t√≠tulos din√°micos basados en el contenido
function generateDynamicLessonTitle(
  blocks: any[],
  moduleTitle: string,
  lessonNumber: number
) {
  const keywords = extractKeywords(blocks);
  const moduleKeywords = moduleTitle.toLowerCase().split(' ').slice(0, 2);

  const lessonTemplates = [
    `Introducci√≥n a ${keywords[0] || moduleKeywords[0]}`,
    `Conceptos fundamentales de ${keywords[0] || moduleKeywords[0]}`,
    `Implementaci√≥n pr√°ctica de ${keywords[0] || moduleKeywords[0]}`,
    `Casos de uso avanzados`,
    `Mejores pr√°cticas y optimizaci√≥n`,
    `Aplicaciones en el mundo real`,
  ];

  return (
    lessonTemplates[lessonNumber - 1] ||
    `Lecci√≥n ${lessonNumber}: ${moduleTitle}`
  );
}

// Funci√≥n para extraer palabras clave del contenido
function extractKeywords(blocks: any[]): string[] {
  const keywords: string[] = [];
  const commonWords = [
    'el',
    'la',
    'de',
    'en',
    'y',
    'a',
    'que',
    'es',
    'con',
    'para',
    'por',
    'del',
    'las',
    'los',
    'un',
    'una',
  ];

  blocks.forEach(block => {
    if (block.type === 'paragraph' && block.data?.text) {
      const words = block.data.text
        .toLowerCase()
        .replace(/[^\w\s]/g, '')
        .split(/\s+/)
        .filter(
          (word: string) => word.length > 3 && !commonWords.includes(word)
        );
      keywords.push(...words.slice(0, 3));
    }
  });

  return [...new Set(keywords)].slice(0, 3);
}

// Funci√≥n para asegurar estructura completa de lecci√≥n
function ensureCompleteLessonStructure(blocks: any[], title: string) {
  // Implementaci√≥n b√°sica - puedes expandir esto seg√∫n necesites
  return blocks;
}
