import { MARKDOWN_RENDERING_POLICIES } from '@/lib/markdown-guidelines';

interface AnthropicMessage {
  role: 'user' | 'assistant';
  content: string;
}

interface AnthropicRequest {
  model: string;
  max_tokens: number;
  messages: AnthropicMessage[];
  system?: string;
}

interface AnthropicResponse {
  content: Array<{
    text: string;
  }>;
  usage: {
    input_tokens: number;
    output_tokens: number;
  };
}

export async function askClaude({
  system,
  user,
  retries = 3,
}: {
  system: string;
  user: string;
  retries?: number;
}): Promise<string> {
  const apiKey = process.env.ANTHROPIC_API_KEY;

  if (!apiKey) {
    throw new Error('ANTHROPIC_API_KEY environment variable is not set');
  }

  const requestBody: AnthropicRequest = {
    model: 'claude-3-5-sonnet-20241022',
    max_tokens: 8000,
    messages: [
      {
        role: 'user',
        content: user,
      },
    ],
    system,
  };

  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîÑ Attempt ${attempt}/${retries} - Calling Anthropic API...`);
      
      const response = await fetch('https://api.anthropic.com/v1/messages', {
        method: 'POST',
        headers: {
          'x-api-key': apiKey,
          'anthropic-version': '2023-06-01',
          'content-type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå API Error (attempt ${attempt}): ${response.status} ${errorText}`);
        
        // Handle specific error codes
        if (response.status === 529 || response.status === 429) {
          // Overloaded or rate limited - wait longer
          if (attempt < retries) {
            const waitTime = Math.pow(2, attempt) * 1000; // Exponential backoff
            console.log(`‚è≥ API overloaded, waiting ${waitTime}ms before retry...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
            continue;
          }
        }
        
        throw new Error(`Anthropic API error: ${response.status} ${errorText}`);
      }

      const data: AnthropicResponse = await response.json();

      if (!data.content || data.content.length === 0) {
        throw new Error('No content received from Anthropic API');
      }

      console.log(`‚úÖ API call successful on attempt ${attempt}`);
      return data.content[0].text;
    } catch (error) {
      console.error(`‚ùå Attempt ${attempt} failed:`, error);
      
      if (attempt === retries) {
        if (error instanceof Error) {
          throw new Error(`Anthropic API call failed after ${retries} attempts: ${error.message}`);
        }
        throw new Error(`Unknown error occurred while calling Anthropic API after ${retries} attempts`);
      }
      
      // Wait before retry
      const waitTime = Math.pow(2, attempt) * 1000;
      console.log(`‚è≥ Waiting ${waitTime}ms before retry...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
  }

  throw new Error('This should never be reached');
}

export async function generateCourseMetadata(
  prompt: string,
  level: string,
  interests: string[]
): Promise<string> {
  const systemPrompt = `Eres un experto pedagogo y dise√±ador de curr√≠culos educativos. Tu tarea es crear un curso que siga principios de aprendizaje humano real.

${MARKDOWN_RENDERING_POLICIES}

Genera metadata de curso en JSON. Responde SOLO con JSON v√°lido:

{
  "title": "string (t√≠tulo atractivo y espec√≠fico)",
  "description": "string (descripci√≥n detallada y enriquecida de 300-400 palabras que explique qu√© aprender√° el estudiante, con ejemplos y aplicaciones reales)",
  "prerequisites": ["string", "string"],
  "totalModules": number (4-6),
  "moduleList": ["string", "string", ...],
  "topics": ["string", "string", ...],
  "introduction": "string (introducci√≥n motivacional al curso de 150-250 palabras, con objetivos claros y expectativas de aprendizaje)",
  "finalProjectData": {
    "title": "string",
    "description": "string",
    "requirements": ["string", "string"],
    "deliverables": ["string", "string"]
  },
  "totalSizeEstimate": "string",
  "language": "es"
}

PRINCIPIOS PEDAG√ìGICOS CR√çTICOS:

1. **PROGRESI√ìN NATURAL**: Cada m√≥dulo debe construir sobre el anterior de manera l√≥gica
2. **NIVEL APROPIADO**: El contenido debe ser apropiado para el nivel especificado
3. **HILO NARRATIVO**: Los m√≥dulos deben contar una historia coherente de aprendizaje
4. **APRENDIZAJE HUMANO**: Prioriza comprensi√≥n conceptual antes que sintaxis

ESTRUCTURA RECOMENDADA POR NIVEL:

**PRINCIPIANTE** (sin experiencia):
- M√≥dulo 1: "¬øQu√© es [tema] y por qu√© es importante?" (conceptos, no c√≥digo)
- M√≥dulo 2: "Primeros pasos pr√°cticos" (herramientas b√°sicas)
- M√≥dulo 3: "Conceptos fundamentales" (teor√≠a aplicada)
- M√≥dulo 4: "Tu primer proyecto" (aplicaci√≥n pr√°ctica)

**INTERMEDIO** (conocimiento b√°sico):
- M√≥dulo 1: "Repaso y profundizaci√≥n" (consolidar bases)
- M√≥dulo 2: "T√©cnicas avanzadas" (herramientas m√°s complejas)
- M√≥dulo 3: "Mejores pr√°cticas" (optimizaci√≥n y calidad)
- M√≥dulo 4: "Proyecto integrador" (aplicaci√≥n completa)

**AVANZADO** (experiencia s√≥lida):
- M√≥dulo 1: "Arquitectura y dise√±o" (patrones avanzados)
- M√≥dulo 2: "Optimizaci√≥n y rendimiento" (t√©cnicas especializadas)
- M√≥dulo 3: "Integraci√≥n y despliegue" (producci√≥n)
- M√≥dulo 4: "Proyecto final avanzado" (aplicaci√≥n real)

EJEMPLOS DE T√çTULOS APROPIADOS POR NIVEL:

**Python Principiante**:
- "¬øQu√© es Python y por qu√© aprenderlo?"
- "Configurando tu entorno de desarrollo"
- "Variables y tipos de datos: Los bloques b√°sicos"
- "Tu primer programa: Una calculadora simple"

**Python Intermedio**:
- "Funciones y m√≥dulos: Organizando tu c√≥digo"
- "Manejo de archivos y datos"
- "Programaci√≥n orientada a objetos"
- "Proyecto: Sistema de gesti√≥n de inventario"

**Python Avanzado**:
- "Arquitectura de aplicaciones Python"
- "Optimizaci√≥n y profiling"
- "APIs y microservicios"
- "Proyecto: Aplicaci√≥n web completa"

IMPORTANTE: Los intereses se usar√°n SOLO en ejemplos y ejercicios, NO son el tema principal del curso.`;

  const userPrompt = `Curso: "${prompt}"
Nivel: ${level}
Intereses (para ejemplos y ejercicios): ${interests.join(', ')}

Crea un curr√≠culo educativo que siga principios de aprendizaje humano real. Considera el nivel del estudiante y crea una progresi√≥n natural que construya conocimiento paso a paso. Los m√≥dulos deben tener un hilo narrativo coherente y ser apropiados para el nivel especificado.`;

  return askClaude({ system: systemPrompt, user: userPrompt });
}

export async function generateModuleContent(
  courseTitle: string,
  moduleTitle: string,
  moduleOrder: number,
  totalModules: number,
  courseDescription: string
): Promise<string> {
  const systemPrompt = `Eres un maestro experto y pedagogo con d√©cadas de experiencia. Tu misi√≥n es crear contenido educativo de la m√°s alta calidad que realmente transforme a los estudiantes. Cada palabra debe tener prop√≥sito educativo.

${MARKDOWN_RENDERING_POLICIES}

Genera contenido de m√≥dulo en JSON. Responde SOLO con JSON v√°lido:

{
  "title": "string",
  "description": "string (descripci√≥n detallada del m√≥dulo, 4-6 oraciones con objetivos concretos y resultados de aprendizaje)",
  "chunks": [
    {"title": "string", "content": "string (M√çNIMO 1200 caracteres, contenido educativo profundo con explicaciones conceptuales, ejemplos reales, analog√≠as, ejercicios mentales y aplicaciones pr√°cticas)"},
    {"title": "string", "content": "string (M√çNIMO 1200 caracteres, contenido educativo profundo con explicaciones conceptuales, ejemplos reales, analog√≠as, ejercicios mentales y aplicaciones pr√°cticas)"},
    {"title": "string", "content": "string (M√çNIMO 1200 caracteres, contenido educativo profundo con explicaciones conceptuales, ejemplos reales, analog√≠as, ejercicios mentales y aplicaciones pr√°cticas)"},
    {"title": "string", "content": "string (M√çNIMO 1200 caracteres, contenido educativo profundo con explicaciones conceptuales, ejemplos reales, analog√≠as, ejercicios mentales y aplicaciones pr√°cticas)"},
    {"title": "string", "content": "string (M√çNIMO 1200 caracteres, contenido educativo profundo con explicaciones conceptuales, ejemplos reales, analog√≠as, ejercicios mentales y aplicaciones pr√°cticas)"},
    {"title": "string", "content": "string (M√çNIMO 1200 caracteres, contenido educativo profundo con explicaciones conceptuales, ejemplos reales, analog√≠as, ejercicios mentales y aplicaciones pr√°cticas)"}
  ],
  "quiz": {
    "title": "string",
    "questions": [
      {
        "question": "string",
        "options": ["string", "string", "string", "string"],
        "correctAnswer": number (0-3),
        "explanation": "string (explicaci√≥n detallada y educativa de por qu√© es correcta, incluyendo conceptos clave)"
      }
    ]
  },
  "total_chunks": 6
}

PRINCIPIOS DE ENSE√ëANZA HUMANA CR√çTICOS:

1. **HILO NARRATIVO**: Cada chunk debe conectar con el anterior y preparar el siguiente
2. **CONTEXTO PRIMERO**: Explica el "por qu√©" antes del "c√≥mo"
3. **PROGRESI√ìN NATURAL**: De lo simple a lo complejo, de lo concreto a lo abstracto
4. **APRENDIZAJE ACTIVO**: Incluye reflexiones, preguntas y ejercicios mentales
5. **RELEVANCIA**: Conecta cada concepto con situaciones reales
6. **PROFUNDIDAD**: Cada chunk debe ser sustancial y educativo, no superficial
7. **EJEMPLOS CONCRETOS**: Usa analog√≠as de la vida real y casos de uso espec√≠ficos
8. **CONSTRUCCI√ìN DE CONOCIMIENTO**: Cada concepto debe construir sobre el anterior

ESTRUCTURA EDUCATIVA POR CHUNK:

**Chunk 1**: Contexto y motivaci√≥n
- ¬øPor qu√© es importante este tema?
- ¬øQu√© problema resuelve?
- ¬øC√≥mo se relaciona con lo anterior?

**Chunk 2**: Conceptos fundamentales
- Explicaci√≥n clara y simple
- Analog√≠as y ejemplos de la vida real
- Evita jerga t√©cnica innecesaria

**Chunk 3**: Aplicaci√≥n pr√°ctica
- Ejemplos concretos y relevantes
- C√≥digo solo si es necesario y apropiado
- Explicaci√≥n paso a paso

**Chunk 4**: Profundizaci√≥n
- Conceptos m√°s avanzados
- Casos de uso reales
- Mejores pr√°cticas

**Chunk 5**: Integraci√≥n
- C√≥mo se conecta con otros conceptos
- Aplicaciones en proyectos reales
- Consideraciones importantes

**Chunk 6**: Consolidaci√≥n
- Resumen de conceptos clave
- Pr√≥ximos pasos
- Ejercicios de reflexi√≥n

REGLAS CR√çTICAS:

**NIVEL PRINCIPIANTE**:
- NO uses c√≥digo en los primeros m√≥dulos
- Explica conceptos con analog√≠as simples
- Usa lenguaje cotidiano, no t√©cnico
- Enf√≥cate en comprensi√≥n, no en memorizaci√≥n

**NIVEL INTERMEDIO**:
- Introduce c√≥digo gradualmente
- Explica la l√≥gica detr√°s del c√≥digo
- Incluye casos de uso pr√°cticos
- Conecta con conocimientos previos

**NIVEL AVANZADO**:
- Usa c√≥digo cuando sea apropiado
- Enf√≥cate en arquitectura y dise√±o
- Incluye consideraciones de producci√≥n
- Conecta con mejores pr√°cticas

FORMATO MARKDOWN:
- Usa ## para t√≠tulos principales
- Usa ### para subt√≠tulos
- Usa \`\`\`lenguaje\`\`\` para bloques de c√≥digo (solo cuando sea apropiado)
- Usa \`c√≥digo\` para c√≥digo inline
- Usa **texto** para √©nfasis importante
- Usa > para consejos o notas importantes
- Usa listas numeradas para pasos secuenciales
- Usa listas con vi√±etas para puntos clave

QUIZ REQUIREMENTS:
- Genera EXACTAMENTE 7 preguntas de calidad
- Cada pregunta debe evaluar comprensi√≥n conceptual, no memorizaci√≥n
- Las opciones deben ser plausibles y educativas
- Las explicaciones deben ense√±ar, no solo justificar
- correctAnswer debe ser 0, 1, 2, o 3 (√≠ndice de la opci√≥n correcta)

EJEMPLOS DE BUENAS PREGUNTAS:
- "¬øPor qu√© es importante [concepto] en [contexto]?"
- "¬øQu√© pasar√≠a si [situaci√≥n] sin [concepto]?"
- "¬øCu√°l es la diferencia entre [A] y [B]?"
- "¬øEn qu√© situaci√≥n usar√≠as [t√©cnica]?"

NO incluyas:
- C√≥digo sin contexto o explicaci√≥n
- Listas superficiales de caracter√≠sticas
- Informaci√≥n t√©cnica sin prop√≥sito educativo
- Contenido que no construya sobre el anterior`;

  const userPrompt = `M√≥dulo: "${moduleTitle}" (${moduleOrder}/${totalModules})
Curso: ${courseTitle}
Descripci√≥n del curso: ${courseDescription}

Crea un m√≥dulo educativo que siga principios de aprendizaje humano real. Considera que este es el m√≥dulo ${moduleOrder} de ${totalModules}, por lo que debe construir sobre conocimientos previos y preparar para los siguientes.

El contenido debe:
- Tener un hilo narrativo coherente
- Ser apropiado para el nivel del curso
- Ense√±ar conceptos, no solo mostrar c√≥digo
- Conectar con situaciones reales
- Progresar naturalmente de lo simple a lo complejo

Genera 6 chunks educativos que formen una historia de aprendizaje completa y un quiz de 7 preguntas que eval√∫en comprensi√≥n real.

FORMATO DE CADA CHUNK (OBLIGATORIO):
- Debe comenzar con un t√≠tulo de nivel 2 (## ...)
- Usar subt√≠tulos de nivel 3 (### ...) cuando corresponda
- Separar p√°rrafos por una l√≠nea en blanco
- Usar listas cuando enumeres ideas o pasos
- Usar bloque de c√≥digo con lenguaje si incluyes c√≥digo
- Incluir citas > para notas o tips cuando aporte valor
`;

  return askClaude({ system: systemPrompt, user: userPrompt });
}
