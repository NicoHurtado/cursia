/**
 * EJEMPLO DE INTEGRACI√ìN
 * C√≥mo usar el sistema de validaci√≥n en tu generaci√≥n de cursos
 * 
 * Copia y adapta este c√≥digo en tu archivo de API de generaci√≥n de m√≥dulos
 */

import { generateLessonsWithValidation } from './lesson-generator-with-validation';
import { ContentTopicValidator } from '@/lib/content-topic-validator';
import { ContentDocument } from '@/lib/content-contract';

/**
 * EJEMPLO 1: Generar un m√≥dulo completo con validaci√≥n autom√°tica
 */
export async function generateModuleWithValidation(
  moduleTitle: string,
  courseTopic: string,
  level: 'beginner' | 'intermediate' | 'advanced',
  interests: string[]
) {
  console.log(`\nüéì === GENERANDO M√ìDULO: ${moduleTitle} ===\n`);

  // PASO 1: Validar n√∫mero apropiado de unidades seg√∫n complejidad del tema
  console.log(`üìä Validando n√∫mero de unidades...`);
  const unitValidation = ContentTopicValidator.validateUnitCount(
    moduleTitle,
    5, // N√∫mero por defecto
    level
  );

  console.log(`   ${unitValidation.isValid ? '‚úÖ' : '‚ö†Ô∏è'} Validaci√≥n de unidades:`);
  console.log(`      - Sugerido: ${unitValidation.suggestedCount} unidades`);
  console.log(`      - Raz√≥n: ${unitValidation.reason}`);

  const totalLessons = unitValidation.suggestedCount;

  // PASO 2: Generar lecciones con validaci√≥n autom√°tica
  console.log(`\nüìö Generando ${totalLessons} lecciones con validaci√≥n...`);
  const result = await generateLessonsWithValidation({
    moduleTitle,
    courseTopic,
    level,
    totalLessons,
    maxAttempts: 2, // Intentar√° hasta 2 veces si detecta problemas
    interests,
  });

  // PASO 3: Revisar resultado de validaci√≥n
  console.log(`\nüìã Resultado de validaci√≥n:`);
  console.log(`   - Lecciones generadas: ${result.lessons.length}`);
  console.log(`   - Intentos realizados: ${result.attemptsMade}`);
  console.log(`   - Se regener√≥: ${result.regenerated ? 'S√ç' : 'NO'}`);
  console.log(`   - Es v√°lido: ${result.validationResult.isValid ? 'S√ç' : 'NO'}`);

  if (result.validationResult.hasRepetitions) {
    console.log(`\n‚ö†Ô∏è Se detectaron ${result.validationResult.repeatedTopics.length} tema(s) repetido(s):`);
    result.validationResult.repeatedTopics.forEach((topic: string) => {
      console.log(`      - "${topic}"`);
    });
  }

  if (result.validationResult.needsMoreDepth) {
    console.log(`\n‚ö†Ô∏è El contenido es superficial (profundidad: ${result.validationResult.depth})`);
  }

  if (result.validationResult.suggestions.length > 0) {
    console.log(`\nüí° Sugerencias de mejora:`);
    result.validationResult.suggestions.forEach((suggestion: string, i: number) => {
      console.log(`   ${i + 1}. ${suggestion}`);
    });
  }

  // PASO 4: Retornar resultado
  console.log(`\n‚úÖ M√≥dulo generado exitosamente\n`);
  return {
    lessons: result.lessons,
    validation: result.validationResult,
    metadata: {
      totalLessons,
      attemptsMade: result.attemptsMade,
      regenerated: result.regenerated,
    },
  };
}

/**
 * EJEMPLO 2: Validar contenido existente de un m√≥dulo
 */
export async function validateExistingModule(
  lessons: ContentDocument[],
  moduleTitle: string
): Promise<{
  isValid: boolean;
  report: string;
  needsRegeneration: boolean;
}> {
  console.log(`\nüîç === VALIDANDO M√ìDULO EXISTENTE: ${moduleTitle} ===\n`);

  // Validar las lecciones
  const validation = ContentTopicValidator.validateModuleLessons(
    lessons,
    moduleTitle
  );

  // Generar reporte
  let report = `Validaci√≥n del M√≥dulo: ${moduleTitle}\n`;
  report += `=====================================\n\n`;
  report += `Total de lecciones: ${lessons.length}\n`;
  report += `Temas √∫nicos detectados: ${validation.topics.length}\n`;
  report += `Profundidad: ${validation.depth}\n`;
  report += `Estado: ${validation.isValid ? 'V√ÅLIDO ‚úÖ' : 'NECESITA MEJORA ‚ö†Ô∏è'}\n\n`;

  if (validation.hasRepetitions) {
    report += `üîÑ TEMAS REPETIDOS (${validation.repeatedTopics.length}):\n`;
    validation.repeatedTopics.forEach((topic) => {
      report += `   - "${topic}"\n`;
    });
    report += `\n`;
  }

  if (validation.needsMoreDepth) {
    report += `üìâ CONTENIDO SUPERFICIAL\n`;
    report += `   El contenido necesita m√°s profundidad.\n`;
    report += `   Profundidad actual: ${validation.depth}\n\n`;
  }

  if (validation.suggestions.length > 0) {
    report += `üí° SUGERENCIAS DE MEJORA:\n`;
    validation.suggestions.forEach((suggestion, i) => {
      report += `   ${i + 1}. ${suggestion}\n`;
    });
    report += `\n`;
  }

  console.log(report);

  return {
    isValid: validation.isValid,
    report,
    needsRegeneration: !validation.isValid,
  };
}

/**
 * EJEMPLO 3: Uso en tu API endpoint existente
 * 
 * Reemplaza tu c√≥digo de generaci√≥n actual con esto:
 */
export async function generateModuleForAPI(
  courseId: string,
  moduleTitle: string,
  courseTopic: string,
  level: string,
  interests: string[],
  db: any // Tu instancia de Prisma
) {
  try {
    console.log(`\nüöÄ Iniciando generaci√≥n de m√≥dulo: ${moduleTitle}`);

    // 1. Generar m√≥dulo con validaci√≥n
    const result = await generateModuleWithValidation(
      moduleTitle,
      courseTopic,
      level as 'beginner' | 'intermediate' | 'advanced',
      interests
    );

    // 2. Crear m√≥dulo en base de datos
    const module = await db.module.create({
      data: {
        courseId,
        moduleOrder: 1, // Ajusta seg√∫n sea necesario
        title: moduleTitle,
        description: `M√≥dulo sobre ${moduleTitle}. Incluye ${result.lessons.length} lecciones completas con contenido validado.`,
      },
    });

    console.log(`‚úÖ M√≥dulo creado en DB con ID: ${module.id}`);

    // 3. Guardar lecciones (chunks) en base de datos
    for (let i = 0; i < result.lessons.length; i++) {
      const lesson = result.lessons[i];

      await db.chunk.create({
        data: {
          moduleId: module.id,
          chunkOrder: i + 1,
          title: lesson.meta.topic,
          content: JSON.stringify(lesson),
          videoData: null,
        },
      });

      console.log(`   ‚úÖ Lecci√≥n ${i + 1} guardada: ${lesson.meta.topic}`);
    }

    // 4. Crear quiz del m√≥dulo (tu l√≥gica existente aqu√≠)
    // ...

    console.log(`\n‚úÖ M√≥dulo completado exitosamente`);
    if (result.metadata.regenerated) {
      console.log(
        `   ‚ÑπÔ∏è Se regener√≥ el contenido en ${result.metadata.attemptsMade} intentos para asegurar calidad`
      );
    }

    return {
      success: true,
      moduleId: module.id,
      lessonsCount: result.lessons.length,
      validationPassed: result.validation.isValid,
    };
  } catch (error) {
    console.error(`‚ùå Error generando m√≥dulo:`, error);
    throw error;
  }
}

/**
 * EJEMPLO 4: Validaci√≥n post-generaci√≥n (opcional)
 * 
 * Si quieres validar despu√©s de que el contenido ya est√° en la base de datos:
 */
export async function validateModuleInDatabase(moduleId: string, db: any) {
  console.log(`\nüîç Validando m√≥dulo en base de datos: ${moduleId}`);

  // 1. Obtener m√≥dulo y sus chunks
  const module = await db.module.findUnique({
    where: { id: moduleId },
    include: {
      chunks: {
        orderBy: { chunkOrder: 'asc' },
      },
    },
  });

  if (!module) {
    throw new Error(`M√≥dulo no encontrado: ${moduleId}`);
  }

  // 2. Parsear chunks a ContentDocument
  const lessons: ContentDocument[] = module.chunks.map((chunk: any) => {
    try {
      return JSON.parse(chunk.content) as ContentDocument;
    } catch (error) {
      console.error(`Error parseando chunk ${chunk.id}:`, error);
      throw error;
    }
  });

  // 3. Validar
  const validationResult = await validateExistingModule(lessons, module.title);

  // 4. Si no es v√°lido, puedes regenerar
  if (validationResult.needsRegeneration) {
    console.log(`\n‚ö†Ô∏è El m√≥dulo necesita ser regenerado`);
    console.log(`   ¬øDeseas regenerar autom√°ticamente? (Implementa tu l√≥gica aqu√≠)`);
  }

  return validationResult;
}

/**
 * EJEMPLO 5: Configuraci√≥n personalizada
 */
export const validationConfig = {
  // Configuraci√≥n estricta (producci√≥n)
  strict: {
    maxAttempts: 3, // M√°s intentos para asegurar calidad
    minBlocksPerLesson: 12, // M√≠nimo de bloques por lecci√≥n
    minSubtopicsPerTopic: 3, // M√≠nimo de subtemas por tema
    allowRepetitions: false, // No permitir ninguna repetici√≥n
  },

  // Configuraci√≥n flexible (desarrollo/testing)
  flexible: {
    maxAttempts: 1, // Un solo intento
    minBlocksPerLesson: 8, // Menos estricto
    minSubtopicsPerTopic: 2, // Menos estricto
    allowRepetitions: true, // Permitir algunas repeticiones
  },

  // Configuraci√≥n balanceada (recomendada)
  balanced: {
    maxAttempts: 2, // Balance entre calidad y tiempo
    minBlocksPerLesson: 10, // Balance
    minSubtopicsPerTopic: 3, // Balance
    allowRepetitions: false, // No repeticiones
  },
};

/**
 * USO RECOMENDADO EN TU API:
 * 
 * 1. En tu archivo: app/api/courses/[id]/generate-module/route.ts
 * 
 * import { generateModuleForAPI } from '@/lib/ai/integration-example';
 * 
 * export async function POST(request: NextRequest, { params }) {
 *   const { moduleTitle, courseTopic, level, interests } = await request.json();
 *   const courseId = params.id;
 *   
 *   const result = await generateModuleForAPI(
 *     courseId,
 *     moduleTitle,
 *     courseTopic,
 *     level,
 *     interests,
 *     db
 *   );
 *   
 *   return NextResponse.json(result);
 * }
 */

